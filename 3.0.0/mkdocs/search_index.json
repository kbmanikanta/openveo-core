{
    "docs": [
        {
            "location": "/", 
            "text": "What's OpenVeo ?\n\n\nOpenVeo is a \nNode.js\n and \nAngularJS\n CMS. It embeds an HTTP server based on Express framework (\nExpress\n) and a plugin loader mechanism.\n\n\nThe core of the system (i.e. without any plugin) offers a simple connection form to the administration interface.\n\n\nThis interface gives access to a limited set of default features:\n\n\n\n\nUsers management\n\n\nPermissions, roles and groups management\n\n\nWeb service management\n\n\nA profile page\n\n\n\n\nEach plugin brings zero to many additive administration pages and zero to many additive public pages.\n\n\nCompatibility\n\n\nOpenVeo has been tested on the following operating systems :\n\n\n\n\nWindows 7\n\n\nUbuntu 14.04\n\n\nDebian 8 (Jessy)\n\n\n\n\nOpenVeo has been tested on the following  :\n\n\n\n\nGoogle Chrome 45\n\n\nMozilla Firefox 40\n\n\nOpera 32\n\n\nInternet Explorer 11\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScreenshots\n\n\nLogin page\n\n\n\n\nBack end home page\n\n\n\n\nBack end roles management page\n\n\n\n\nBack end users management page\n\n\n\n\nBack end groups management page\n\n\n\n\nBack end applications management page", 
            "title": "INTRODUCTION"
        }, 
        {
            "location": "/#whats-openveo", 
            "text": "OpenVeo is a  Node.js  and  AngularJS  CMS. It embeds an HTTP server based on Express framework ( Express ) and a plugin loader mechanism.  The core of the system (i.e. without any plugin) offers a simple connection form to the administration interface.  This interface gives access to a limited set of default features:   Users management  Permissions, roles and groups management  Web service management  A profile page   Each plugin brings zero to many additive administration pages and zero to many additive public pages.", 
            "title": "What's OpenVeo ?"
        }, 
        {
            "location": "/#compatibility", 
            "text": "OpenVeo has been tested on the following operating systems :   Windows 7  Ubuntu 14.04  Debian 8 (Jessy)   OpenVeo has been tested on the following  :   Google Chrome 45  Mozilla Firefox 40  Opera 32  Internet Explorer 11", 
            "title": "Compatibility"
        }, 
        {
            "location": "/#screenshots", 
            "text": "Login page   Back end home page   Back end roles management page   Back end users management page   Back end groups management page   Back end applications management page", 
            "title": "Screenshots"
        }, 
        {
            "location": "/prerequisites/", 
            "text": "OpenVeo requires and has been tested on :\n\n\n\n\nNode.js\n (\n4.0.0 and \n5.0.0\n) - The server side of OpenVeo is written in Node.js\n\n\nNpm\n (\n=2.5.1 and \n3.0.0\n) - Npm will help you install all OpenVeo server dependencies\n\n\nMongoDB\n (\n=3.0.0\n) - OpenVeo stores all its datas inside a MongoDB database (users, roles, taxonomies etc.)\n\n\nBower\n (\n=1.5.2\n) - Bower will help you install all OpenVeo client dependencies, such as AngularJS and Bootstrap massively used in client side.\n\n\nImageMagick\n - Image Magick is used to dynamically generate derivated images (e.g. thumbs)\n\n\nFFMPEG\n - FFMPEG is used to extract information from incoming videos\n\n\n\n\nNB :\n Moreover, for a Windows installation, Visual Studio Express is required as some OpenVeo dependencies are written in C and need to be compiled. For Linux you may have to install the package libkrb5-dev.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Installation\n\n\nnpm install @openveo/core\n\n\n\nNb :\n You will be prompted for some configuration. Don't worry if you made an error, you can edit configuration anytime using \nadvanced configuration\n.\n\n\nLaunch the application\n\n\nOpenVeo is now installed. Launch it :\n\n\nnode server.js\n\n\n\nVerify that OpenVeo is working\n\n\nOpenVeo does not have any public pages. Consequently navigating to \nhttp://localhost:PORT\n will lead you to a 404 error page (it's a good sign if it does). To check that OpenVeo is working, try to log to the back end.\n\n\nLog to the back end\n\n\nYou can now access the back end at \nhttp://localhost:PORT/be/login\n (replace \nPORT\n by the port specified in \n~/.openveo/core/serverConf.json\n) using the super admin email and password.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#installation", 
            "text": "npm install @openveo/core  Nb :  You will be prompted for some configuration. Don't worry if you made an error, you can edit configuration anytime using  advanced configuration .", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/#launch-the-application", 
            "text": "OpenVeo is now installed. Launch it :  node server.js", 
            "title": "Launch the application"
        }, 
        {
            "location": "/getting-started/#verify-that-openveo-is-working", 
            "text": "OpenVeo does not have any public pages. Consequently navigating to  http://localhost:PORT  will lead you to a 404 error page (it's a good sign if it does). To check that OpenVeo is working, try to log to the back end.", 
            "title": "Verify that OpenVeo is working"
        }, 
        {
            "location": "/getting-started/#log-to-the-back-end", 
            "text": "You can now access the back end at  http://localhost:PORT/be/login  (replace  PORT  by the port specified in  ~/.openveo/core/serverConf.json ) using the super admin email and password.", 
            "title": "Log to the back end"
        }, 
        {
            "location": "/web-service/", 
            "text": "Introduction\n\n\nOpenVeo offers a Web Service which must be started as a different process and needs some extra configuration.\n\n\nConfigure the Web Service\n\n\nOpen \n~openveo/core/serverConf.json\n\n\n{\n  \nws\n : {\n    \nport\n : PORT // Replace PORT by the HTTP server port to use (e.g. 3001)\n  }\n}\n\n\n\n\nConfigure the Web Service logger\n\n\nOpen \n~openveo/core/loggerConf.json\n\n\n{\n  \nws\n : {\n    \nfileName\n : \n/var/log/openveo/openveo-ws.log\n, // Path to web service log file\n    \nlevel\n : \ninfo\n, // Log level\n    \nmaxFileSize\n : 1048576, // Maximum log file size (in Bytes)\n    \nmaxFiles\n : 2 // Maximum number of files archived\n  }\n}\n\n\n\n\nLaunch the Web Service\n\n\nIf you want to interact with OpenVeo through the Web Service, you need to start it.\nTo start the OpenVeo Web Service, just use the \n-ws\n option :\n\n\nnode server.js -ws\n\n\n\nAuthenticate to the Web Service\n\n\nThe Web Service uses \nOAuth2\n for authentication.\n\n\nGet a client id and client secret\n\n\nYou can create a new application with a client id and a client secret through the back end (\nhttp://localhost:PORT/be/applications\n).\n\n\nGet an access token\n\n\nTo make Web Service requests you will need an Access token. To get an Access token, you must make an HTTP POST request on \n/token\n.\n\n\nExpected headers :\n\n\n\n\n'Authorization: Basic CREDENTIALS'\n (Replace CREDENTIALS by \"CLIENT_ID:CLIENT_SECRET\" encoded in base 64)\n\n\n\n\nExpected POST parameters :\n\n\n\n\n'grant_type' =\n 'client_credentials'\n\n\n\n\nYou will receive an Access token to authenticate each Web Service requests.\n\n\nPHP example\n\n\n$curlCookieJar = tempnam(sys_get_temp_dir(), \ncookies_\n);\n\n// Initialize a curl session\n$curlHandle = curl_init();\n\n// Default curl options for all future requests\ncurl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($curlHandle, CURLOPT_COOKIESESSION, false);\ncurl_setopt($curlHandle, CURLOPT_COOKIEJAR, $curlCookieJar);\ncurl_setopt($curlHandle, CURLOPT_COOKIEFILE, $curlCookieJar);\ncurl_setopt($curlHandle, CURLOPT_HEADER, false);\ncurl_setopt($curlHandle, CURLOPT_CONNECTTIMEOUT, 1);\ncurl_setopt($curlHandle, CURLOPT_TIMEOUT, 30);\n\n// Retrieve an oauth token\n// Use HTTP POST method\ncurl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'POST');\n\n// Replace {OPENVEO_URL} by the openveo server url\ncurl_setopt($curlHandle, CURLOPT_URL, '{OPENVEO_URL}/token');\n\n// Replace {CLIENT_ID} and {CLIENT_SECRET} by your credentials\ncurl_setopt($curlHandle, CURLOPT_HTTPHEADER, array(\n  'Authorization: Basic ' . base64_encode('{CLIENT_ID}:{CLIENT_SECRET}'),\n  'Content-Type: application/json'\n));\n\n// Set oauth grant type to client_credentials\ncurl_setopt($curlHandle, CURLOPT_POSTFIELDS, json_encode(array(\n    'grant_type' =\n 'client_credentials'\n  )\n));\n\n$resultWithToken = json_decode(curl_exec($curlHandle));\n\n\n\n\nAuthenticate a request\n\n\nAll requests to the Web Service must be authenticated using the HTTP header :\n\n\n\n\n'Authorization: Bearer TOKEN'\n (Replace TOKEN by your access token)\n\n\n\n\nPHP example\n\n\n// Get the list of videos\ncurl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($curlHandle, CURLOPT_URL, '{OPENVEO_URL}/publish/videos');\ncurl_setopt($curlHandle, CURLOPT_HTTPHEADER, array(\n  'Authorization: Bearer ' . $resultWithToken-\naccess_token\n));\n\n// Got the list of videos\n$videos = json_decode(curl_exec($curlHandle));\n\n\n\n\nEndpoints\n\n\nTaxonomies\n\n\nGet taxonomies.\n\n\nGET WEB_SERVICE_URL/taxonomies\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nString\n\n\nNo\n\n\n-\n\n\nTo search on taxonomies' name\n\n\n\n\n\n\nsortOrder\n\n\nString\n\n\nNo\n\n\ndesc\n\n\nSort order (either \nasc\n or \ndesc\n)\n\n\n\n\n\n\npage\n\n\nNumber\n\n\nNo\n\n\n1\n\n\nThe expected page\n\n\n\n\n\n\nlimit\n\n\nNumber\n\n\nNo\n\n\n-\n\n\nTo limit the number of taxonomies per page. If not specified get all taxonomies\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the list of taxonomies (even if the list is empty)\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong list of parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nentities\n: [\n    {\n      \nid\n: \n1443533344313\n,\n      \nname\n: \nTaxonomy 1\n,\n      \ntree\n: [\n        {\n          \nid\n : \n1445433239636\n,\n          \nitems\n: [],\n          \ntitle\n: \nTerm 1\n\n        }\n      ]\n    },\n    {\n      \nid\n: \n1333443134453\n,\n      \nname\n: \nTaxonomy 2\n,\n      \ntree\n: [\n        {\n          \nid\n : \n3239636144543\n,\n          \nitems\n: [],\n          \ntitle\n: \nTerm 1\n\n        }\n      ]\n    }\n  ],\n  \npagination\n: {\n    \nlimit\n: 1,\n    \npage\n: 1,\n    \npages\n: 2,\n    \nsize\n: 2\n  }\n}\n\n\n\n\n\n\nGet taxonomy.\n\n\nGET WEB_SERVICE_URL/taxonomies/{taxonomy_id}\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the taxonomy\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the taxonomy id\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nentity\n: {\n    \nname\n: \nMy taxonomy\n,\n    \nid\n: \n{taxonomy_id}\n,\n    \ntree\n: []\n  }\n}\n\n\n\n\n\n\nGet the list of terms of a taxonomy.\n\n\nGET WEB_SERVICE_URL/taxonomies/{taxonomy_id}/terms\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the taxonomy's terms\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the taxonomy id\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nterms\n: [\n    {\n      \nid\n : \n1445433239636\n,\n      \ntitle\n: \nTerm 1\n,\n      \nitems\n: [\n        {\n          \nid\n : \n1445433239637\n,\n          \nitems\n: [],\n          \ntitle\n: \nSub term 1\n\n        }\n      ]\n    },\n    {\n      \ntitle\n: \nTerm 2\n,\n      \nid\n : \n1333443134453\n,\n      \nitems\n: []\n    }\n  ]\n}\n\n\n\n\n\n\nAdd a taxonomy.\n\n\nPUT WEB_SERVICE_URL/taxonomies\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe taxonomy has been added\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong PUT parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nentity\n: {\n    \nname\n: \nMy taxonomy\n,\n    \nid\n: \n41U3sYipg\n,\n    \ntree\n: []\n  }\n}\n\n\n\n\n\n\nUpdate a taxonomy.\n\n\nPOST WEB_SERVICE_URL/taxonomies/{taxonomy_id}\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe taxonomy has been updated\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the taxonomy id\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nerror\n: null,\n  \nstatus\n: \nok\n\n}\n\n\n\n\n\n\nDelete a taxonomy.\n\n\nDELETE WEB_SERVICE_URL/taxonomies/{taxonomy_id}\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe taxonomy has been deleted\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the taxonomy id\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nerror\n: null,\n  \nstatus\n: \nok\n\n}\n\n\n\n\nGroups\n\n\nGet groups.\n\n\nGET WEB_SERVICE_URL/groups\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nString\n\n\nNo\n\n\n-\n\n\nTo search on both groups' name and description\n\n\n\n\n\n\nsortBy\n\n\nString\n\n\nNo\n\n\nname\n\n\nTo sort groups by either \nname\n or \ndescription\n\n\n\n\n\n\nsortOrder\n\n\nString\n\n\nNo\n\n\ndesc\n\n\nSort order (either \nasc\n or \ndesc\n)\n\n\n\n\n\n\npage\n\n\nNumber\n\n\nNo\n\n\n1\n\n\nThe expected page\n\n\n\n\n\n\nlimit\n\n\nNumber\n\n\nNo\n\n\n-\n\n\nTo limit the number of groups per page. If not specified get all groups\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the list of groups (even if the list is empty)\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong list of parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nentities\n: [\n    {\n      \nid\n: \nNk0fPIulZ\n,\n      \nname\n: \nGroup name\n,\n      \ndescription\n: \nGroup description\n\n    },\n    {\n      \nid\n: \nVJfQDIul-\n,\n      \nname\n: \nGroup name\n,\n      \ndescription\n: \nGroup description\n\n    }\n  ],\n  \npagination\n: {\n    \nlimit\n: 1,\n    \npage\n: 1,\n    \npages\n: 2,\n    \nsize\n: 2\n  }\n}\n\n\n\n\n\n\nGet information about a group.\n\n\nGET WEB_SERVICE_URL/groups/{group_id}\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\ngroup_id\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe id of the group to fetch\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the group\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the id of the group\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nentity\n: {\n    \nid\n: \n{group_id}\n,\n    \nname\n: \nGroup name\n,\n    \ndescription\n: \nGroup description\n\n  }\n}\n\n\n\n\n\n\nAdd a group.\n\n\nPUT WEB_SERVICE_URL/groups\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe group has been added\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong PUT parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nentity\n: {\n    \nid\n: \n41U3sYipg\n,\n    \nname\n: \nGroup name\n,\n    \ndescription\n: \nGroup description\n\n  }\n}\n\n\n\n\n\n\nUpdate a group.\n\n\nPOST WEB_SERVICE_URL/groups/{group_id}\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe group has been updated\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the group id\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nerror\n: null,\n  \nstatus\n: \nok\n\n}\n\n\n\n\n\n\nDelete a group.\n\n\nDELETE WEB_SERVICE_URL/groups/{group_id}\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe group has been deleted\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the group id\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nerror\n: null,\n  \nstatus\n: \nok\n\n}\n\n\n\n\nRoles\n\n\nGet roles.\n\n\nGET WEB_SERVICE_URL/roles\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nString\n\n\nNo\n\n\n-\n\n\nTo search on roles' name\n\n\n\n\n\n\nsortOrder\n\n\nString\n\n\nNo\n\n\ndesc\n\n\nSort order (either \nasc\n or \ndesc\n)\n\n\n\n\n\n\npage\n\n\nNumber\n\n\nNo\n\n\n1\n\n\nThe expected page\n\n\n\n\n\n\nlimit\n\n\nNumber\n\n\nNo\n\n\n-\n\n\nTo limit the number of roles per page. If not specified get all roles\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the list of roles (even if the list is empty)\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong list of parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nentities\n: [\n    {\n      \nid\n: \n4J5KIL_lb\n,\n      \nname\n: \nRole name\n,\n      \npermissions\n : [...]\n    }\n  ],\n  \npagination\n: {\n    \nlimit\n: 1,\n    \npage\n: 1,\n    \npages\n: 2,\n    \nsize\n: 2\n  }\n}\n\n\n\n\n\n\nGet information about a role.\n\n\nGET WEB_SERVICE_URL/roles/{role_id}\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nrole_id\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe id of the role to fetch\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the role\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the id of the role\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nentity\n: {\n    \nid\n: \n{role_id}\n,\n    \nname\n: \nRole name\n,\n    \npermissions\n : [...]\n  }\n}\n\n\n\n\n\n\nAdd a role.\n\n\nPUT WEB_SERVICE_URL/roles\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe role has been added\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong PUT parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nentity\n: {\n    \nid\n: \n41U3sYipg\n,\n    \nname\n: \nRole name\n,\n    \npermissions\n : [...]\n  }\n}\n\n\n\n\n\n\nUpdate a role.\n\n\nPOST WEB_SERVICE_URL/roles/{role_id}\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe role has been updated\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the role id\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nerror\n: null,\n  \nstatus\n: \nok\n\n}\n\n\n\n\n\n\nDelete a role.\n\n\nDELETE WEB_SERVICE_URL/roles/{role_id}\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe role has been deleted\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the role id\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nerror\n: null,\n  \nstatus\n: \nok\n\n}\n\n\n\n\nUsers\n\n\nGet users.\n\n\nGET WEB_SERVICE_URL/users\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nString\n\n\nNo\n\n\n-\n\n\nTo search on users' name\n\n\n\n\n\n\nsortOrder\n\n\nString\n\n\nNo\n\n\ndesc\n\n\nSort order (either \nasc\n or \ndesc\n)\n\n\n\n\n\n\npage\n\n\nNumber\n\n\nNo\n\n\n1\n\n\nThe expected page\n\n\n\n\n\n\nlimit\n\n\nNumber\n\n\nNo\n\n\n-\n\n\nTo limit the number of users per page. If not specified get all users\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the list of users (even if the list is empty)\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong list of parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nentities\n: [\n    {\n      \nid\n: \n42\n,\n      \nname\n: \nUser name\n,\n      \npassword\n: \n38d03dd58cd1bb6b4fdc59c3d03601461118c166b48baf787b96d5589ff0758d\n,\n      \nemail\n : \nuser.mail@company.com\n\n    }\n  ],\n  \npagination\n: {\n    \nlimit\n: 1,\n    \npage\n: 1,\n    \npages\n: 2,\n    \nsize\n: 2\n  }\n}\n\n\n\n\n\n\nGet information about a user.\n\n\nGET WEB_SERVICE_URL/users/{user_id}\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe id of the user to fetch\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the user\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the id of the user\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nentity\n: {\n    \nid\n: \n{user_id}\n,\n    \nname\n: \nUser name\n,\n    \npassword\n: \n38d03dd58cd1bb6b4fdc59c3d03601461118c166b48baf787b96d5589ff0758d\n,\n    \nemail\n : \nuser.mail@company.com\n\n  }\n}\n\n\n\n\n\n\nAdd a user.\n\n\nPUT WEB_SERVICE_URL/users\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe user has been added\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong PUT parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nentity\n: {\n    \nid\n: \n41U3sYipg\n,\n    \nname\n: \nUser name\n,\n    \npassword\n: \n38d03dd58cd1bb6b4fdc59c3d03601461118c166b48baf787b96d5589ff0758d\n,\n    \nemail\n : \nuser.mail@company.com\n\n  }\n}\n\n\n\n\n\n\nUpdate a user.\n\n\nPOST WEB_SERVICE_URL/users/{user_id}\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe user has been updated\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the user id\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nerror\n: null,\n  \nstatus\n: \nok\n\n}\n\n\n\n\n\n\nDelete a user.\n\n\nDELETE WEB_SERVICE_URL/users/{user_id}\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe user has been deleted\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the user id\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nerror\n: null,\n  \nstatus\n: \nok\n\n}\n\n\n\n\nApplications\n\n\nGet applications.\n\n\nGET WEB_SERVICE_URL/applications\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nString\n\n\nNo\n\n\n-\n\n\nTo search on applications' name\n\n\n\n\n\n\nsortOrder\n\n\nString\n\n\nNo\n\n\ndesc\n\n\nSort order (either \nasc\n or \ndesc\n)\n\n\n\n\n\n\npage\n\n\nNumber\n\n\nNo\n\n\n1\n\n\nThe expected page\n\n\n\n\n\n\nlimit\n\n\nNumber\n\n\nNo\n\n\n-\n\n\nTo limit the number of applications per page. If not specified get all applications\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the list of applications (even if the list is empty)\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong list of parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nentities\n: [\n    {\n      \nid\n: \n4J6CUL_gZ\n,\n      \nname\n: \nApplication name\n,\n      \nscopes\n: [...],\n      \nsecret\n : \n179a905785d4258bba255ffb812a25f2225f7d4c\n\n    }\n  ],\n  \npagination\n: {\n    \nlimit\n: 1,\n    \npage\n: 1,\n    \npages\n: 2,\n    \nsize\n: 2\n  }\n}\n\n\n\n\n\n\nGet information about an application.\n\n\nGET WEB_SERVICE_URL/applications/{application_id}\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\napplication_id\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe id of the application to fetch\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the application\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the id of the application\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nentity\n: {\n    \nid\n: \n{application_id}\n,\n    \nname\n: \nApplication name\n,\n    \nscopes\n: [...],\n    \nsecret\n : \n179a905785d4258bba255ffb812a25f2225f7d4c\n\n  }\n}\n\n\n\n\n\n\nAdd an application.\n\n\nPUT WEB_SERVICE_URL/applications\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe application has been added\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong PUT parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nentity\n: {\n    \nid\n: \n41U3sYipg\n,\n    \nname\n: \nApplication name\n,\n    \nscopes\n: [...],\n    \nsecret\n : \n179a905785d4258bba255ffb812a25f2225f7d4c\n\n  }\n}\n\n\n\n\n\n\nUpdate an application.\n\n\nPOST WEB_SERVICE_URL/applications/{application_id}\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe application has been updated\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the application id\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nerror\n: null,\n  \nstatus\n: \nok\n\n}\n\n\n\n\n\n\nDelete an application.\n\n\nDELETE WEB_SERVICE_URL/applications/{application_id}\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe application has been deleted\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the application id\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \nerror\n: null,\n  \nstatus\n: \nok\n\n}\n\n\n\n\nClient libraries\n\n\nPHP client\n\n\nA \nPHP client\n is also available on Github to help interface with OpenVeo Web Service.\n\n\nNodeJS client\n\n\nA \nNodeJS client\n is also available on Github to help interface with OpenVeo Web Service.", 
            "title": "Web Service"
        }, 
        {
            "location": "/web-service/#introduction", 
            "text": "OpenVeo offers a Web Service which must be started as a different process and needs some extra configuration.", 
            "title": "Introduction"
        }, 
        {
            "location": "/web-service/#configure-the-web-service", 
            "text": "Open  ~openveo/core/serverConf.json  {\n   ws  : {\n     port  : PORT // Replace PORT by the HTTP server port to use (e.g. 3001)\n  }\n}", 
            "title": "Configure the Web Service"
        }, 
        {
            "location": "/web-service/#configure-the-web-service-logger", 
            "text": "Open  ~openveo/core/loggerConf.json  {\n   ws  : {\n     fileName  :  /var/log/openveo/openveo-ws.log , // Path to web service log file\n     level  :  info , // Log level\n     maxFileSize  : 1048576, // Maximum log file size (in Bytes)\n     maxFiles  : 2 // Maximum number of files archived\n  }\n}", 
            "title": "Configure the Web Service logger"
        }, 
        {
            "location": "/web-service/#launch-the-web-service", 
            "text": "If you want to interact with OpenVeo through the Web Service, you need to start it.\nTo start the OpenVeo Web Service, just use the  -ws  option :  node server.js -ws", 
            "title": "Launch the Web Service"
        }, 
        {
            "location": "/web-service/#authenticate-to-the-web-service", 
            "text": "The Web Service uses  OAuth2  for authentication.", 
            "title": "Authenticate to the Web Service"
        }, 
        {
            "location": "/web-service/#get-a-client-id-and-client-secret", 
            "text": "You can create a new application with a client id and a client secret through the back end ( http://localhost:PORT/be/applications ).", 
            "title": "Get a client id and client secret"
        }, 
        {
            "location": "/web-service/#get-an-access-token", 
            "text": "To make Web Service requests you will need an Access token. To get an Access token, you must make an HTTP POST request on  /token .  Expected headers :   'Authorization: Basic CREDENTIALS'  (Replace CREDENTIALS by \"CLIENT_ID:CLIENT_SECRET\" encoded in base 64)   Expected POST parameters :   'grant_type' =  'client_credentials'   You will receive an Access token to authenticate each Web Service requests.  PHP example  $curlCookieJar = tempnam(sys_get_temp_dir(),  cookies_ );\n\n// Initialize a curl session\n$curlHandle = curl_init();\n\n// Default curl options for all future requests\ncurl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($curlHandle, CURLOPT_COOKIESESSION, false);\ncurl_setopt($curlHandle, CURLOPT_COOKIEJAR, $curlCookieJar);\ncurl_setopt($curlHandle, CURLOPT_COOKIEFILE, $curlCookieJar);\ncurl_setopt($curlHandle, CURLOPT_HEADER, false);\ncurl_setopt($curlHandle, CURLOPT_CONNECTTIMEOUT, 1);\ncurl_setopt($curlHandle, CURLOPT_TIMEOUT, 30);\n\n// Retrieve an oauth token\n// Use HTTP POST method\ncurl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'POST');\n\n// Replace {OPENVEO_URL} by the openveo server url\ncurl_setopt($curlHandle, CURLOPT_URL, '{OPENVEO_URL}/token');\n\n// Replace {CLIENT_ID} and {CLIENT_SECRET} by your credentials\ncurl_setopt($curlHandle, CURLOPT_HTTPHEADER, array(\n  'Authorization: Basic ' . base64_encode('{CLIENT_ID}:{CLIENT_SECRET}'),\n  'Content-Type: application/json'\n));\n\n// Set oauth grant type to client_credentials\ncurl_setopt($curlHandle, CURLOPT_POSTFIELDS, json_encode(array(\n    'grant_type' =  'client_credentials'\n  )\n));\n\n$resultWithToken = json_decode(curl_exec($curlHandle));", 
            "title": "Get an access token"
        }, 
        {
            "location": "/web-service/#authenticate-a-request", 
            "text": "All requests to the Web Service must be authenticated using the HTTP header :   'Authorization: Bearer TOKEN'  (Replace TOKEN by your access token)   PHP example  // Get the list of videos\ncurl_setopt($curlHandle, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($curlHandle, CURLOPT_URL, '{OPENVEO_URL}/publish/videos');\ncurl_setopt($curlHandle, CURLOPT_HTTPHEADER, array(\n  'Authorization: Bearer ' . $resultWithToken- access_token\n));\n\n// Got the list of videos\n$videos = json_decode(curl_exec($curlHandle));", 
            "title": "Authenticate a request"
        }, 
        {
            "location": "/web-service/#endpoints", 
            "text": "", 
            "title": "Endpoints"
        }, 
        {
            "location": "/web-service/#taxonomies", 
            "text": "Get taxonomies.  GET WEB_SERVICE_URL/taxonomies     Name  Type  Required  Default  Details      query  String  No  -  To search on taxonomies' name    sortOrder  String  No  desc  Sort order (either  asc  or  desc )    page  Number  No  1  The expected page    limit  Number  No  -  To limit the number of taxonomies per page. If not specified get all taxonomies        HTTP Status Code  Details      200  Got the list of taxonomies (even if the list is empty)    500  An error occured on the server side    400  Wrong list of parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   entities : [\n    {\n       id :  1443533344313 ,\n       name :  Taxonomy 1 ,\n       tree : [\n        {\n           id  :  1445433239636 ,\n           items : [],\n           title :  Term 1 \n        }\n      ]\n    },\n    {\n       id :  1333443134453 ,\n       name :  Taxonomy 2 ,\n       tree : [\n        {\n           id  :  3239636144543 ,\n           items : [],\n           title :  Term 1 \n        }\n      ]\n    }\n  ],\n   pagination : {\n     limit : 1,\n     page : 1,\n     pages : 2,\n     size : 2\n  }\n}   Get taxonomy.  GET WEB_SERVICE_URL/taxonomies/{taxonomy_id}     HTTP Status Code  Details      200  Got the taxonomy    500  An error occured on the server side    400  Missing the taxonomy id    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   entity : {\n     name :  My taxonomy ,\n     id :  {taxonomy_id} ,\n     tree : []\n  }\n}   Get the list of terms of a taxonomy.  GET WEB_SERVICE_URL/taxonomies/{taxonomy_id}/terms     HTTP Status Code  Details      200  Got the taxonomy's terms    500  An error occured on the server side    400  Missing the taxonomy id    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   terms : [\n    {\n       id  :  1445433239636 ,\n       title :  Term 1 ,\n       items : [\n        {\n           id  :  1445433239637 ,\n           items : [],\n           title :  Sub term 1 \n        }\n      ]\n    },\n    {\n       title :  Term 2 ,\n       id  :  1333443134453 ,\n       items : []\n    }\n  ]\n}   Add a taxonomy.  PUT WEB_SERVICE_URL/taxonomies     HTTP Status Code  Details      200  The taxonomy has been added    500  An error occured on the server side    400  Wrong PUT parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   entity : {\n     name :  My taxonomy ,\n     id :  41U3sYipg ,\n     tree : []\n  }\n}   Update a taxonomy.  POST WEB_SERVICE_URL/taxonomies/{taxonomy_id}     HTTP Status Code  Details      200  The taxonomy has been updated    500  An error occured on the server side    400  Missing the taxonomy id    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   error : null,\n   status :  ok \n}   Delete a taxonomy.  DELETE WEB_SERVICE_URL/taxonomies/{taxonomy_id}     HTTP Status Code  Details      200  The taxonomy has been deleted    500  An error occured on the server side    400  Missing the taxonomy id    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   error : null,\n   status :  ok \n}", 
            "title": "Taxonomies"
        }, 
        {
            "location": "/web-service/#groups", 
            "text": "Get groups.  GET WEB_SERVICE_URL/groups     Name  Type  Required  Default  Details      query  String  No  -  To search on both groups' name and description    sortBy  String  No  name  To sort groups by either  name  or  description    sortOrder  String  No  desc  Sort order (either  asc  or  desc )    page  Number  No  1  The expected page    limit  Number  No  -  To limit the number of groups per page. If not specified get all groups        HTTP Status Code  Details      200  Got the list of groups (even if the list is empty)    500  An error occured on the server side    400  Wrong list of parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   entities : [\n    {\n       id :  Nk0fPIulZ ,\n       name :  Group name ,\n       description :  Group description \n    },\n    {\n       id :  VJfQDIul- ,\n       name :  Group name ,\n       description :  Group description \n    }\n  ],\n   pagination : {\n     limit : 1,\n     page : 1,\n     pages : 2,\n     size : 2\n  }\n}   Get information about a group.  GET WEB_SERVICE_URL/groups/{group_id}     Name  Type  Required  Default  Details      group_id  String  Yes  -  The id of the group to fetch        HTTP Status Code  Details      200  Got the group    500  An error occured on the server side    400  Missing the id of the group    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   entity : {\n     id :  {group_id} ,\n     name :  Group name ,\n     description :  Group description \n  }\n}   Add a group.  PUT WEB_SERVICE_URL/groups     HTTP Status Code  Details      200  The group has been added    500  An error occured on the server side    400  Wrong PUT parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   entity : {\n     id :  41U3sYipg ,\n     name :  Group name ,\n     description :  Group description \n  }\n}   Update a group.  POST WEB_SERVICE_URL/groups/{group_id}     HTTP Status Code  Details      200  The group has been updated    500  An error occured on the server side    400  Missing the group id    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   error : null,\n   status :  ok \n}   Delete a group.  DELETE WEB_SERVICE_URL/groups/{group_id}     HTTP Status Code  Details      200  The group has been deleted    500  An error occured on the server side    400  Missing the group id    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   error : null,\n   status :  ok \n}", 
            "title": "Groups"
        }, 
        {
            "location": "/web-service/#roles", 
            "text": "Get roles.  GET WEB_SERVICE_URL/roles     Name  Type  Required  Default  Details      query  String  No  -  To search on roles' name    sortOrder  String  No  desc  Sort order (either  asc  or  desc )    page  Number  No  1  The expected page    limit  Number  No  -  To limit the number of roles per page. If not specified get all roles        HTTP Status Code  Details      200  Got the list of roles (even if the list is empty)    500  An error occured on the server side    400  Wrong list of parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   entities : [\n    {\n       id :  4J5KIL_lb ,\n       name :  Role name ,\n       permissions  : [...]\n    }\n  ],\n   pagination : {\n     limit : 1,\n     page : 1,\n     pages : 2,\n     size : 2\n  }\n}   Get information about a role.  GET WEB_SERVICE_URL/roles/{role_id}     Name  Type  Required  Default  Details      role_id  String  Yes  -  The id of the role to fetch        HTTP Status Code  Details      200  Got the role    500  An error occured on the server side    400  Missing the id of the role    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   entity : {\n     id :  {role_id} ,\n     name :  Role name ,\n     permissions  : [...]\n  }\n}   Add a role.  PUT WEB_SERVICE_URL/roles     HTTP Status Code  Details      200  The role has been added    500  An error occured on the server side    400  Wrong PUT parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   entity : {\n     id :  41U3sYipg ,\n     name :  Role name ,\n     permissions  : [...]\n  }\n}   Update a role.  POST WEB_SERVICE_URL/roles/{role_id}     HTTP Status Code  Details      200  The role has been updated    500  An error occured on the server side    400  Missing the role id    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   error : null,\n   status :  ok \n}   Delete a role.  DELETE WEB_SERVICE_URL/roles/{role_id}     HTTP Status Code  Details      200  The role has been deleted    500  An error occured on the server side    400  Missing the role id    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   error : null,\n   status :  ok \n}", 
            "title": "Roles"
        }, 
        {
            "location": "/web-service/#users", 
            "text": "Get users.  GET WEB_SERVICE_URL/users     Name  Type  Required  Default  Details      query  String  No  -  To search on users' name    sortOrder  String  No  desc  Sort order (either  asc  or  desc )    page  Number  No  1  The expected page    limit  Number  No  -  To limit the number of users per page. If not specified get all users        HTTP Status Code  Details      200  Got the list of users (even if the list is empty)    500  An error occured on the server side    400  Wrong list of parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   entities : [\n    {\n       id :  42 ,\n       name :  User name ,\n       password :  38d03dd58cd1bb6b4fdc59c3d03601461118c166b48baf787b96d5589ff0758d ,\n       email  :  user.mail@company.com \n    }\n  ],\n   pagination : {\n     limit : 1,\n     page : 1,\n     pages : 2,\n     size : 2\n  }\n}   Get information about a user.  GET WEB_SERVICE_URL/users/{user_id}     Name  Type  Required  Default  Details      user_id  String  Yes  -  The id of the user to fetch        HTTP Status Code  Details      200  Got the user    500  An error occured on the server side    400  Missing the id of the user    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   entity : {\n     id :  {user_id} ,\n     name :  User name ,\n     password :  38d03dd58cd1bb6b4fdc59c3d03601461118c166b48baf787b96d5589ff0758d ,\n     email  :  user.mail@company.com \n  }\n}   Add a user.  PUT WEB_SERVICE_URL/users     HTTP Status Code  Details      200  The user has been added    500  An error occured on the server side    400  Wrong PUT parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   entity : {\n     id :  41U3sYipg ,\n     name :  User name ,\n     password :  38d03dd58cd1bb6b4fdc59c3d03601461118c166b48baf787b96d5589ff0758d ,\n     email  :  user.mail@company.com \n  }\n}   Update a user.  POST WEB_SERVICE_URL/users/{user_id}     HTTP Status Code  Details      200  The user has been updated    500  An error occured on the server side    400  Missing the user id    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   error : null,\n   status :  ok \n}   Delete a user.  DELETE WEB_SERVICE_URL/users/{user_id}     HTTP Status Code  Details      200  The user has been deleted    500  An error occured on the server side    400  Missing the user id    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   error : null,\n   status :  ok \n}", 
            "title": "Users"
        }, 
        {
            "location": "/web-service/#applications", 
            "text": "Get applications.  GET WEB_SERVICE_URL/applications     Name  Type  Required  Default  Details      query  String  No  -  To search on applications' name    sortOrder  String  No  desc  Sort order (either  asc  or  desc )    page  Number  No  1  The expected page    limit  Number  No  -  To limit the number of applications per page. If not specified get all applications        HTTP Status Code  Details      200  Got the list of applications (even if the list is empty)    500  An error occured on the server side    400  Wrong list of parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   entities : [\n    {\n       id :  4J6CUL_gZ ,\n       name :  Application name ,\n       scopes : [...],\n       secret  :  179a905785d4258bba255ffb812a25f2225f7d4c \n    }\n  ],\n   pagination : {\n     limit : 1,\n     page : 1,\n     pages : 2,\n     size : 2\n  }\n}   Get information about an application.  GET WEB_SERVICE_URL/applications/{application_id}     Name  Type  Required  Default  Details      application_id  String  Yes  -  The id of the application to fetch        HTTP Status Code  Details      200  Got the application    500  An error occured on the server side    400  Missing the id of the application    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   entity : {\n     id :  {application_id} ,\n     name :  Application name ,\n     scopes : [...],\n     secret  :  179a905785d4258bba255ffb812a25f2225f7d4c \n  }\n}   Add an application.  PUT WEB_SERVICE_URL/applications     HTTP Status Code  Details      200  The application has been added    500  An error occured on the server side    400  Wrong PUT parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   entity : {\n     id :  41U3sYipg ,\n     name :  Application name ,\n     scopes : [...],\n     secret  :  179a905785d4258bba255ffb812a25f2225f7d4c \n  }\n}   Update an application.  POST WEB_SERVICE_URL/applications/{application_id}     HTTP Status Code  Details      200  The application has been updated    500  An error occured on the server side    400  Missing the application id    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   error : null,\n   status :  ok \n}   Delete an application.  DELETE WEB_SERVICE_URL/applications/{application_id}     HTTP Status Code  Details      200  The application has been deleted    500  An error occured on the server side    400  Missing the application id    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n   error : null,\n   status :  ok \n}", 
            "title": "Applications"
        }, 
        {
            "location": "/web-service/#client-libraries", 
            "text": "", 
            "title": "Client libraries"
        }, 
        {
            "location": "/web-service/#php-client", 
            "text": "A  PHP client  is also available on Github to help interface with OpenVeo Web Service.", 
            "title": "PHP client"
        }, 
        {
            "location": "/web-service/#nodejs-client", 
            "text": "A  NodeJS client  is also available on Github to help interface with OpenVeo Web Service.", 
            "title": "NodeJS client"
        }, 
        {
            "location": "/advanced-configuration/", 
            "text": "Introduction\n\n\nConfiguration files are all in user's directory under \n~/.openveo/core\n\n\n\n\n~/.openveo/core/conf.json\n\n\n~/.openveo/core/databaseConf.json\n\n\n~/.openveo/core/loggerConf.json\n\n\n~/.openveo/core/serverConf.json\n\n\n\n\nNb :\n You must restart OpenVeo servers after modifications.\n\n\nConfigure OpenVeo\n\n\nOpen \n~/.openveo/core/conf.json\n\n\n{\n  \npasswordHashKey\n : \nKEY\n, // Replace KEY by a secret key used to encrypt users passwords\n  \nanonymousUserId\n : \nID\n // Replace ID by the anonymous user id\n}\n\n\n\n\nConfigure database access\n\n\nOpen \n~/.openveo/core/databaseConf.json\n\n\n{\n  \ntype\n : \nmongodb\n, // Do not change\n  \nhost\n : \nlocalhost\n, // MongoDB server host\n  \nport\n : 27017, // MongoDB port\n  \ndatabase\n : \nDATABASE_NAME\n, // Replace DATABASE_NAME by the name of the OpenVeo database\n  \nusername\n : \nDATABASE_USER_NAME\n, // Replace DATABASE_USER_NAME by the name of the database user\n  \npassword\n : \nDATABASE_USER_PWD\n // Replace DATABASE_USER_PWD  by the password of the database user\n}\n\n\n\n\nConfigure the logger\n\n\nOpen \n~/.openveo/core/loggerConf.json\n\n\n{\n  \napp\n : {\n    \nfileName\n : \n/var/log/openveo/openveo.log\n, // Path to application log file\n    \nlevel\n : \ninfo\n, // Log level\n    \nmaxFileSize\n : 1048576, // Maximum log file size (in Bytes)\n    \nmaxFiles\n : 2 // Maximum number of files archived\n  },\n  \nws\n : {\n    \nfileName\n : \n/var/log/openveo/openveo-ws.log\n, // Path to the web service log file\n    \nlevel\n : \ninfo\n, // Log level\n    \nmaxFileSize\n : 1048576, // Maximum log file size (in Bytes)\n    \nmaxFiles\n : 2 // Maximum number of files archived\n  }\n}\n\n\n\n\nConfigure the server\n\n\nOpen \n~/.openveo/core/serverConf.json\n\n\n{\n  \napp\n : {\n    \nport\n : PORT, // Replace PORT by the HTTP server port to use (e.g. 3000)\n    \nsessionSecret\n : \nSECRET\n // Replace SECRET by a secret used to secure HTTP sessions\n  },\n  \nws\n: {\n    \nport\n: WS_POST  // Replace WS_PORT by the HTTP server port to use (e.g. 3001)\n  }\n}", 
            "title": "Advanced configuration"
        }, 
        {
            "location": "/advanced-configuration/#introduction", 
            "text": "Configuration files are all in user's directory under  ~/.openveo/core   ~/.openveo/core/conf.json  ~/.openveo/core/databaseConf.json  ~/.openveo/core/loggerConf.json  ~/.openveo/core/serverConf.json   Nb :  You must restart OpenVeo servers after modifications.", 
            "title": "Introduction"
        }, 
        {
            "location": "/advanced-configuration/#configure-openveo", 
            "text": "Open  ~/.openveo/core/conf.json  {\n   passwordHashKey  :  KEY , // Replace KEY by a secret key used to encrypt users passwords\n   anonymousUserId  :  ID  // Replace ID by the anonymous user id\n}", 
            "title": "Configure OpenVeo"
        }, 
        {
            "location": "/advanced-configuration/#configure-database-access", 
            "text": "Open  ~/.openveo/core/databaseConf.json  {\n   type  :  mongodb , // Do not change\n   host  :  localhost , // MongoDB server host\n   port  : 27017, // MongoDB port\n   database  :  DATABASE_NAME , // Replace DATABASE_NAME by the name of the OpenVeo database\n   username  :  DATABASE_USER_NAME , // Replace DATABASE_USER_NAME by the name of the database user\n   password  :  DATABASE_USER_PWD  // Replace DATABASE_USER_PWD  by the password of the database user\n}", 
            "title": "Configure database access"
        }, 
        {
            "location": "/advanced-configuration/#configure-the-logger", 
            "text": "Open  ~/.openveo/core/loggerConf.json  {\n   app  : {\n     fileName  :  /var/log/openveo/openveo.log , // Path to application log file\n     level  :  info , // Log level\n     maxFileSize  : 1048576, // Maximum log file size (in Bytes)\n     maxFiles  : 2 // Maximum number of files archived\n  },\n   ws  : {\n     fileName  :  /var/log/openveo/openveo-ws.log , // Path to the web service log file\n     level  :  info , // Log level\n     maxFileSize  : 1048576, // Maximum log file size (in Bytes)\n     maxFiles  : 2 // Maximum number of files archived\n  }\n}", 
            "title": "Configure the logger"
        }, 
        {
            "location": "/advanced-configuration/#configure-the-server", 
            "text": "Open  ~/.openveo/core/serverConf.json  {\n   app  : {\n     port  : PORT, // Replace PORT by the HTTP server port to use (e.g. 3000)\n     sessionSecret  :  SECRET  // Replace SECRET by a secret used to secure HTTP sessions\n  },\n   ws : {\n     port : WS_POST  // Replace WS_PORT by the HTTP server port to use (e.g. 3001)\n  }\n}", 
            "title": "Configure the server"
        }, 
        {
            "location": "/scalability/", 
            "text": "MongoDB database replication\n\n\nIf you want to take benefit of your \nMongoDB replication set\n, you can adapt your OpenVeo configuration.\n\n\nOpen \n~openveo/core/databaseConf.json\n and add a name for the ReplicaSet and a comma separated list of secondary servers.\n\n\n{\n  ...\n  \nreplicaSet\n : \nREPLICA_SET_NAME\n, // Replace REPLICA_SET_NAME by the name of the ReplicaSet\n  \nseedlist\n: \nIP_1:PORT_1,IP_2:PORT_2\n // The list comma separated list of secondary servers\n}\n\n\n\n\n{\n  \ntype\n : \nmongodb\n, // Do not change\n  \nhost\n : \nlocalhost\n, // MongoDB server host\n  \nport\n : 27017, // MongoDB port\n  \ndatabase\n : \nDATABASE_NAME\n, // Replace DATABASE_NAME by the name of the OpenVeo database\n  \nusername\n : \nDATABASE_USER_NAME\n, // Replace DATABASE_USER_NAME by the name of the database user\n  \npassword\n : \nDATABASE_USER_PWD\n, // Replace DATABASE_USER_PWD  by the password of the database user\n  \nreplicaSet\n : \nREPLICA_SET_NAME\n, // Replace REPLICA_SET_NAME by the name of the ReplicaSet\n  \nseedlist\n: \nIP_1:PORT_1,IP_2:PORT_2\n // The comma separated list of secondary servers\n}", 
            "title": "Scalability"
        }, 
        {
            "location": "/scalability/#mongodb-database-replication", 
            "text": "If you want to take benefit of your  MongoDB replication set , you can adapt your OpenVeo configuration.  Open  ~openveo/core/databaseConf.json  and add a name for the ReplicaSet and a comma separated list of secondary servers.  {\n  ...\n   replicaSet  :  REPLICA_SET_NAME , // Replace REPLICA_SET_NAME by the name of the ReplicaSet\n   seedlist :  IP_1:PORT_1,IP_2:PORT_2  // The list comma separated list of secondary servers\n}  {\n   type  :  mongodb , // Do not change\n   host  :  localhost , // MongoDB server host\n   port  : 27017, // MongoDB port\n   database  :  DATABASE_NAME , // Replace DATABASE_NAME by the name of the OpenVeo database\n   username  :  DATABASE_USER_NAME , // Replace DATABASE_USER_NAME by the name of the database user\n   password  :  DATABASE_USER_PWD , // Replace DATABASE_USER_PWD  by the password of the database user\n   replicaSet  :  REPLICA_SET_NAME , // Replace REPLICA_SET_NAME by the name of the ReplicaSet\n   seedlist :  IP_1:PORT_1,IP_2:PORT_2  // The comma separated list of secondary servers\n}", 
            "title": "MongoDB database replication"
        }, 
        {
            "location": "/production/", 
            "text": "Launch in production\n\n\nTo use OpenVeo in a production environment, start the server in production :\n\n\n# Starts OpenVeo application in production environment\nNODE_ENV=production node server.js\n\n# Starts OpenVeo Web Service in production environment\nNODE_ENV=production node server.js -ws\n\n\n\nNb :\n You should also consider launching the process as a deamon.\n\n\nReplicate database\n\n\nYou should consider replicating your database using \nMongoDB ReplicaSets\n. You can configure OpenVeo to \nuse your ReplicaSets\n.", 
            "title": "Production"
        }, 
        {
            "location": "/production/#launch-in-production", 
            "text": "To use OpenVeo in a production environment, start the server in production :  # Starts OpenVeo application in production environment\nNODE_ENV=production node server.js\n\n# Starts OpenVeo Web Service in production environment\nNODE_ENV=production node server.js -ws  Nb :  You should also consider launching the process as a deamon.", 
            "title": "Launch in production"
        }, 
        {
            "location": "/production/#replicate-database", 
            "text": "You should consider replicating your database using  MongoDB ReplicaSets . You can configure OpenVeo to  use your ReplicaSets .", 
            "title": "Replicate database"
        }, 
        {
            "location": "/developers/basics/", 
            "text": "HTTP server\n\n\nBased on \nExpress framework\n, OpenVeo creates an HTTP server with a list of routes.\nRoutes are mounted on \n/\n while plugins routes are mounted on \n/PLUGIN_NAME\n with PLUGIN_NAME the name of the plugin.\nThere are three categories of routes :\n\n\n\n\nPublic routes : Routes accessible to anyone who has access to the url\n\n\nPrivate routes : Routes accessible only to users authenticated to the back end\n\n\nWeb Service routes : Routes accessible only to users authenticated to the Web Service\n\n\n\n\nBack end\n\n\nOpenVeo core offers a back end as an AngularJS single page application accessible on \n/be\n. Without plugins, the back end has only limited features (users, roles, web service, profile page). And without plugins no front end is created. This is an important point. There is no generic front end, each plugin can define its own front pages on \n/PLUGIN_NAME\n base path.\n\n\nWeb Service\n\n\nOpenVeo core can create a \nWeb Service\n (using the option \n-ws\n when starting the server) mechanism based on oauth2 authentication.\n\n\nThrough the back end you can create a new Web Service application with its associated list of scopes. Each new Web Service application will have an associated client id and client secret to authenticate to the Web Service. Thus you can create as many applications as you want with different scopes for each one.\n\n\nPlugins\n\n\nOpenVeo core loads all plugins found in \nnode_modules/@openveo/\n when starting the server. Each plugin can :\n\n\n\n\nCreate its own back end pages\n\n\nCreate public and private routes\n\n\nCreate Web Service routes", 
            "title": "The basics"
        }, 
        {
            "location": "/developers/basics/#http-server", 
            "text": "Based on  Express framework , OpenVeo creates an HTTP server with a list of routes.\nRoutes are mounted on  /  while plugins routes are mounted on  /PLUGIN_NAME  with PLUGIN_NAME the name of the plugin.\nThere are three categories of routes :   Public routes : Routes accessible to anyone who has access to the url  Private routes : Routes accessible only to users authenticated to the back end  Web Service routes : Routes accessible only to users authenticated to the Web Service", 
            "title": "HTTP server"
        }, 
        {
            "location": "/developers/basics/#back-end", 
            "text": "OpenVeo core offers a back end as an AngularJS single page application accessible on  /be . Without plugins, the back end has only limited features (users, roles, web service, profile page). And without plugins no front end is created. This is an important point. There is no generic front end, each plugin can define its own front pages on  /PLUGIN_NAME  base path.", 
            "title": "Back end"
        }, 
        {
            "location": "/developers/basics/#web-service", 
            "text": "OpenVeo core can create a  Web Service  (using the option  -ws  when starting the server) mechanism based on oauth2 authentication.  Through the back end you can create a new Web Service application with its associated list of scopes. Each new Web Service application will have an associated client id and client secret to authenticate to the Web Service. Thus you can create as many applications as you want with different scopes for each one.", 
            "title": "Web Service"
        }, 
        {
            "location": "/developers/basics/#plugins", 
            "text": "OpenVeo core loads all plugins found in  node_modules/@openveo/  when starting the server. Each plugin can :   Create its own back end pages  Create public and private routes  Create Web Service routes", 
            "title": "Plugins"
        }, 
        {
            "location": "/developers/prerequisites/", 
            "text": "OpenVeo requires additional elements for development :\n\n\n\n\nGit\n - openveo-core is versioned with git\n\n\nRuby\n / \nSass\n / \nCompass\n - CSS is written using SASS / Compass\n\n\nKarma\n - Back end AngularJS single page application is unit tested using karma\n\n\nGrunt\n - Grunt is used to launch unit tests and compile sources\n\n\nProtractor\n - End to end tests are performed using Protractor\n\n\nMkdocs\n - To generate this documentation", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/developers/installation/", 
            "text": "Clone project from git\n\n\ngit clone git@github.com:veo-labs/openveo-core.git openveo\n\n\n\nInstall project's dependencies\n\n\ncd openveo\nnpm install", 
            "title": "Installation"
        }, 
        {
            "location": "/developers/installation/#clone-project-from-git", 
            "text": "git clone git@github.com:veo-labs/openveo-core.git openveo", 
            "title": "Clone project from git"
        }, 
        {
            "location": "/developers/installation/#install-projects-dependencies", 
            "text": "cd openveo\nnpm install", 
            "title": "Install project's dependencies"
        }, 
        {
            "location": "/developers/write-plugin/", 
            "text": "Yeoman generator\n\n\nTo write your own OpenVeo plugin you should use the OpenVeo Yeoman generator to automatically create the skeleton of your plugin with \nOpenVeo Plugin Generator\n\n\n\"How to\"\n\n\nAll documentation needed to implement your plugin is available on the \nOpenVeo Plugin Generator\n project.", 
            "title": "Write a plugin"
        }, 
        {
            "location": "/developers/write-plugin/#yeoman-generator", 
            "text": "To write your own OpenVeo plugin you should use the OpenVeo Yeoman generator to automatically create the skeleton of your plugin with  OpenVeo Plugin Generator", 
            "title": "Yeoman generator"
        }, 
        {
            "location": "/developers/write-plugin/#how-to", 
            "text": "All documentation needed to implement your plugin is available on the  OpenVeo Plugin Generator  project.", 
            "title": "\"How to\""
        }, 
        {
            "location": "/developers/unit-tests/", 
            "text": "Node.js unit tests\n\n\nServer side unit tests are performed using \nMocha\n and \nChai\n. You can launch server unit tests with the following command :\n\n\ngrunt mochaTest\n\n\n\nAngularJS unit tests\n\n\nClient side unit tests are performed using \nKarma\n. You can launch client unit tests with the following command :\n\n\ngrunt karma", 
            "title": "Unit tests"
        }, 
        {
            "location": "/developers/unit-tests/#nodejs-unit-tests", 
            "text": "Server side unit tests are performed using  Mocha  and  Chai . You can launch server unit tests with the following command :  grunt mochaTest", 
            "title": "Node.js unit tests"
        }, 
        {
            "location": "/developers/unit-tests/#angularjs-unit-tests", 
            "text": "Client side unit tests are performed using  Karma . You can launch client unit tests with the following command :  grunt karma", 
            "title": "AngularJS unit tests"
        }, 
        {
            "location": "/developers/end-to-end-tests/", 
            "text": "Introduction\n\n\nEnd to end tests are performed using \nProtractor\n.\n\n\nEach plugin (and OpenVeo core) defines a list of test suites in \ntests/client/protractorSuites.json\n.\n\n\nInstall selenium web driver and chrome driver\n\n\nnode_modules/grunt-protractor-runner/node_modules/protractor/bin/webdriver-manager update\n\n\n\nConfigure tests\n\n\nYou need to specify a new database which will be used during tests. To do so, you can add a new configuration file in user's directory under \n~/.openveo/core\n called \ndatabaseTestConf.json\n.\n\n\n~/.openveo/core/databaseTestConf.json\n\n\n{\n  \ntype\n: \nmongodb\n,\n  \nhost\n: \nlocalhost\n,\n  \nport\n: 27017,\n  \ndatabase\n: \nopenveo-test\n,\n  \nusername\n: \nopenveo\n,\n  \npassword\n: \nopenveo\n\n}\n\n\n\n\nWARNING\n : Each time you launch end to end tests, all information will be removed from this database ! DO NOT use the same database as the one described in \ndatabaseConf.json\n\n\nWhen launching tests, an OpenVeo server is automatically spawned and must be configured through \nserverTestConf.json\n. Typically you may want to change the server port.\n\n\n~/.openveo/core/serverTestConf.json\n\n\n{\n  \napp\n: {\n    \nport\n: 3004,\n    \nsessionSecret\n: \n2bXELdIqoT9Tbv5i1RfcXGEIE+GQS+XYbwVn0qEx\n\n  },\n  \nws\n: {\n    \nport\n: 3005\n  }\n}\n\n\n\n\nFinally the logger has to be configured through \nloggerTestConf.json\n. Typically you may want to deactivate logger standard output.\n\n\n~/.openveo/core/loggerTestConf.json\n\n\n{\n  \napp\n: {\n    \nlevel\n: \ninfo\n,\n    \nmaxFileSize\n: 1048576,\n    \nmaxFiles\n: 2,\n    \nfileName\n: \nC:/Users/Vodalys/AppData/Local/Temp/openveo/logs/openveo.log\n,\n    \nconsole\n: false\n  },\n  \nws\n: {\n    \nlevel\n: \ninfo\n,\n    \nmaxFileSize\n: 1048576,\n    \nmaxFiles\n: 2,\n    \nfileName\n: \nC:/Users/Vodalys/AppData/Local/Temp/openveo/logs/openveo-ws.log\n,\n    \nconsole\n: false\n  }\n}\n\n\n\n\nconsole: false\n will deactivate standard output.\n\n\nWriting tests\n\n\nBoot steps\n\n\nWhen launching end to end tests, several things happen before the first test is launched :\n\n\n\n\nDatabase defined in \n~/.openveo/core/databaseTestConf.json\n is dropped\n\n\nUsers, roles, groups and applications described in \ntests/client/e2eTests/database/data.json\n, from core and plugins, are inserted into database\n\n\nTests suites files, in \ntests/client/e2eTests/protractorSuites.json\n from core and plugins, are merged into one single file (\ntests/client/e2eTests/suites/suites.json\n)\n\n\nAn OpenVeo server is launched\n\n\nAn OpenVeo Web Service server is launched\n\n\nA database connection is made to be able to use models in tests\n\n\nAll plugins are loaded and available in ApplicationStorage\n\n\n\n\nAdd users, roles, groups and application before tests\n\n\nUsers, roles, groups and applications can be added before tests are launched using \ntests/client/e2eTests/database/data.json\n configuration file.\n\n\nStructure is as follow :\n\n\n{\n  \ngroups\n: {\n    ...\n  },\n  \nroles\n: {\n    ...\n  },\n  \nusers\n: {\n    ...\n  },\n  \napplications\n: {\n    ...\n  }\n}\n\n\n\n\nCreate a group\n\n\n{\n  \ngroups\n: {\n    \ncoreGroupId\n: { // Id of the group to use when creating roles\n      \nname\n: \nCore group name\n, // The name of the group\n      \ndescription\n: \nCore group description\n // The description of the group\n    }\n  }\n}\n\n\n\n\nCreate a role\n\n\n{\n  \nroles\n: {\n    \ncoreAdmin\n: { // Id of the role to use when creating users\n      \nname\n: \ncore-admin\n, // The name of the role\n      \npermissions\n: [ // The list of permissions ids as described in conf.js file\n        \nadd-application\n,\n        \nupdate-application\n,\n        \ndelete-application\n,\n        \nadd-taxonomy\n,\n        \nupdate-taxonomy\n,\n        \ndelete-taxonomy\n,\n        \nadd-user\n,\n        \nupdate-user\n,\n        \ndelete-user\n,\n        \nadd-role\n,\n        \nupdate-role\n,\n        \ndelete-role\n,\n        \naccess-applications-page\n,\n        \naccess-users-page\n,\n        \naccess-roles-page\n,\n        \nget-group-coreGroupId\n, // Permission \nget\n on the group \ncoreGroupId\n\n        \nupdate-group-coreGroupId\n, // Permission \nupdate\n on the group \ncoreGroupId\n\n        \ndelete-group-coreGroupId\n // Permission \ndelete\n on the group \ncoreGroupId\n\n      ]\n    }\n  }\n}\n\n\n\n\nCreate a user\n\n\n{\n  \nusers\n: {\n    \ncoreAdmin\n: { // Id of the user (not used)\n      \nname\n: \ncore-admin\n, // The name of the user\n      \nemail\n: \ncore-admin@veo-labs.com\n, User's email\n      \npassword\n: \ncore-admin\n, // User's password\n      \nroles\n: [ \ncoreAdmin\n ] // User's list of roles (role ids are the one described in the same file)\n    }\n  }\n}\n\n\n\n\nCreate an application\n\n\n{\n  \napplications\n: {\n    \ncoreApplicationsGuest\n: { // Id of the application (not used)\n      \nname\n: \ncore-applications-guest\n, // Name of the application\n      \nscopes\n: [ \npublish-videos\n ] // List of scope ids for the application\n    }\n  }\n}\n\n\n\n\nCreate test\n\n\nCreate your test file in \ntests/client/e2eTests/\n then update the list of suites, if necessary, in  \ntests/client/e2eTests/suites/suites.json\n.\n\n\nDebug\n\n\nIf a test fails, a screenshot of the browser at the instant is taken and available in \nbuild/screenshots\n of the core.\n\n\nLaunch end to end tests\n\n\n# Launch all end to end tests on chrome\ngrunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true\n\n# Launch all end to end tests on firefox\ngrunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"firefox\\\"}\" --directConnect=true\n\n# Launch only coreHome suite on chrome\ngrunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true --suite=\"coreHome\"", 
            "title": "End to end tests"
        }, 
        {
            "location": "/developers/end-to-end-tests/#introduction", 
            "text": "End to end tests are performed using  Protractor .  Each plugin (and OpenVeo core) defines a list of test suites in  tests/client/protractorSuites.json .", 
            "title": "Introduction"
        }, 
        {
            "location": "/developers/end-to-end-tests/#install-selenium-web-driver-and-chrome-driver", 
            "text": "node_modules/grunt-protractor-runner/node_modules/protractor/bin/webdriver-manager update", 
            "title": "Install selenium web driver and chrome driver"
        }, 
        {
            "location": "/developers/end-to-end-tests/#configure-tests", 
            "text": "You need to specify a new database which will be used during tests. To do so, you can add a new configuration file in user's directory under  ~/.openveo/core  called  databaseTestConf.json .  ~/.openveo/core/databaseTestConf.json  {\n   type :  mongodb ,\n   host :  localhost ,\n   port : 27017,\n   database :  openveo-test ,\n   username :  openveo ,\n   password :  openveo \n}  WARNING  : Each time you launch end to end tests, all information will be removed from this database ! DO NOT use the same database as the one described in  databaseConf.json  When launching tests, an OpenVeo server is automatically spawned and must be configured through  serverTestConf.json . Typically you may want to change the server port.  ~/.openveo/core/serverTestConf.json  {\n   app : {\n     port : 3004,\n     sessionSecret :  2bXELdIqoT9Tbv5i1RfcXGEIE+GQS+XYbwVn0qEx \n  },\n   ws : {\n     port : 3005\n  }\n}  Finally the logger has to be configured through  loggerTestConf.json . Typically you may want to deactivate logger standard output.  ~/.openveo/core/loggerTestConf.json  {\n   app : {\n     level :  info ,\n     maxFileSize : 1048576,\n     maxFiles : 2,\n     fileName :  C:/Users/Vodalys/AppData/Local/Temp/openveo/logs/openveo.log ,\n     console : false\n  },\n   ws : {\n     level :  info ,\n     maxFileSize : 1048576,\n     maxFiles : 2,\n     fileName :  C:/Users/Vodalys/AppData/Local/Temp/openveo/logs/openveo-ws.log ,\n     console : false\n  }\n}  console: false  will deactivate standard output.", 
            "title": "Configure tests"
        }, 
        {
            "location": "/developers/end-to-end-tests/#writing-tests", 
            "text": "", 
            "title": "Writing tests"
        }, 
        {
            "location": "/developers/end-to-end-tests/#boot-steps", 
            "text": "When launching end to end tests, several things happen before the first test is launched :   Database defined in  ~/.openveo/core/databaseTestConf.json  is dropped  Users, roles, groups and applications described in  tests/client/e2eTests/database/data.json , from core and plugins, are inserted into database  Tests suites files, in  tests/client/e2eTests/protractorSuites.json  from core and plugins, are merged into one single file ( tests/client/e2eTests/suites/suites.json )  An OpenVeo server is launched  An OpenVeo Web Service server is launched  A database connection is made to be able to use models in tests  All plugins are loaded and available in ApplicationStorage", 
            "title": "Boot steps"
        }, 
        {
            "location": "/developers/end-to-end-tests/#add-users-roles-groups-and-application-before-tests", 
            "text": "Users, roles, groups and applications can be added before tests are launched using  tests/client/e2eTests/database/data.json  configuration file.  Structure is as follow :  {\n   groups : {\n    ...\n  },\n   roles : {\n    ...\n  },\n   users : {\n    ...\n  },\n   applications : {\n    ...\n  }\n}  Create a group  {\n   groups : {\n     coreGroupId : { // Id of the group to use when creating roles\n       name :  Core group name , // The name of the group\n       description :  Core group description  // The description of the group\n    }\n  }\n}  Create a role  {\n   roles : {\n     coreAdmin : { // Id of the role to use when creating users\n       name :  core-admin , // The name of the role\n       permissions : [ // The list of permissions ids as described in conf.js file\n         add-application ,\n         update-application ,\n         delete-application ,\n         add-taxonomy ,\n         update-taxonomy ,\n         delete-taxonomy ,\n         add-user ,\n         update-user ,\n         delete-user ,\n         add-role ,\n         update-role ,\n         delete-role ,\n         access-applications-page ,\n         access-users-page ,\n         access-roles-page ,\n         get-group-coreGroupId , // Permission  get  on the group  coreGroupId \n         update-group-coreGroupId , // Permission  update  on the group  coreGroupId \n         delete-group-coreGroupId  // Permission  delete  on the group  coreGroupId \n      ]\n    }\n  }\n}  Create a user  {\n   users : {\n     coreAdmin : { // Id of the user (not used)\n       name :  core-admin , // The name of the user\n       email :  core-admin@veo-labs.com , User's email\n       password :  core-admin , // User's password\n       roles : [  coreAdmin  ] // User's list of roles (role ids are the one described in the same file)\n    }\n  }\n}  Create an application  {\n   applications : {\n     coreApplicationsGuest : { // Id of the application (not used)\n       name :  core-applications-guest , // Name of the application\n       scopes : [  publish-videos  ] // List of scope ids for the application\n    }\n  }\n}  Create test  Create your test file in  tests/client/e2eTests/  then update the list of suites, if necessary, in   tests/client/e2eTests/suites/suites.json .", 
            "title": "Add users, roles, groups and application before tests"
        }, 
        {
            "location": "/developers/end-to-end-tests/#debug", 
            "text": "If a test fails, a screenshot of the browser at the instant is taken and available in  build/screenshots  of the core.", 
            "title": "Debug"
        }, 
        {
            "location": "/developers/end-to-end-tests/#launch-end-to-end-tests", 
            "text": "# Launch all end to end tests on chrome\ngrunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true\n\n# Launch all end to end tests on firefox\ngrunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"firefox\\\"}\" --directConnect=true\n\n# Launch only coreHome suite on chrome\ngrunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true --suite=\"coreHome\"", 
            "title": "Launch end to end tests"
        }, 
        {
            "location": "/api/", 
            "text": "Backend AngularJS API\n\n\nThe \nBackend API\n helps you write backend pages for OpenVeo.", 
            "title": "API"
        }, 
        {
            "location": "/api/#backend-angularjs-api", 
            "text": "The  Backend API  helps you write backend pages for OpenVeo.", 
            "title": "Backend AngularJS API"
        }
    ]
}