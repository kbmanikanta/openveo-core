{
    "project": {
        "name": "OpenVeo Core server",
        "description": "Node.js OpenVeo Core documentation",
        "version": "4.0.0"
    },
    "files": {
        "app\\server\\controllers\\ApplicationController.js": {
            "name": "app\\server\\controllers\\ApplicationController.js",
            "modules": {},
            "classes": {
                "ApplicationController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\controllers\\AuthenticationController.js": {
            "name": "app\\server\\controllers\\AuthenticationController.js",
            "modules": {},
            "classes": {
                "authenticationController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\controllers\\DefaultController.js": {
            "name": "app\\server\\controllers\\DefaultController.js",
            "modules": {},
            "classes": {
                "DefaultController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\controllers\\ErrorController.js": {
            "name": "app\\server\\controllers\\ErrorController.js",
            "modules": {},
            "classes": {
                "ErrorController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\controllers\\GroupController.js": {
            "name": "app\\server\\controllers\\GroupController.js",
            "modules": {},
            "classes": {
                "GroupController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\controllers\\I18nController.js": {
            "name": "app\\server\\controllers\\I18nController.js",
            "modules": {},
            "classes": {
                "I18nController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\controllers\\MenuController.js": {
            "name": "app\\server\\controllers\\MenuController.js",
            "modules": {},
            "classes": {
                "MenuController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\controllers\\OAuthController.js": {
            "name": "app\\server\\controllers\\OAuthController.js",
            "modules": {},
            "classes": {
                "OauthController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\controllers\\RoleController.js": {
            "name": "app\\server\\controllers\\RoleController.js",
            "modules": {},
            "classes": {
                "RoleController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\controllers\\TaxonomyController.js": {
            "name": "app\\server\\controllers\\TaxonomyController.js",
            "modules": {},
            "classes": {
                "TaxonomyController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\controllers\\UserController.js": {
            "name": "app\\server\\controllers\\UserController.js",
            "modules": {},
            "classes": {
                "UserController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\controllers\\doc.js": {
            "name": "app\\server\\controllers\\doc.js",
            "modules": {
                "core-controllers": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\loaders\\doc.js": {
            "name": "app\\server\\loaders\\doc.js",
            "modules": {
                "core-loaders": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\loaders\\entityLoader.js": {
            "name": "app\\server\\loaders\\entityLoader.js",
            "modules": {},
            "classes": {
                "entityLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\loaders\\migrationLoader.js": {
            "name": "app\\server\\loaders\\migrationLoader.js",
            "modules": {},
            "classes": {
                "migrationLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\loaders\\namespaceLoader.js": {
            "name": "app\\server\\loaders\\namespaceLoader.js",
            "modules": {},
            "classes": {
                "namespaceLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\loaders\\permissionLoader.js": {
            "name": "app\\server\\loaders\\permissionLoader.js",
            "modules": {},
            "classes": {
                "permissionLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\loaders\\pluginLoader.js": {
            "name": "app\\server\\loaders\\pluginLoader.js",
            "modules": {},
            "classes": {
                "pluginLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\loaders\\routeLoader.js": {
            "name": "app\\server\\loaders\\routeLoader.js",
            "modules": {},
            "classes": {
                "routeLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\migration\\migrationProcess.js": {
            "name": "app\\server\\migration\\migrationProcess.js",
            "modules": {
                "core-migration": 1
            },
            "classes": {
                "migrationProcess": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\models\\ClientModel.js": {
            "name": "app\\server\\models\\ClientModel.js",
            "modules": {},
            "classes": {
                "ClientModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\models\\GroupModel.js": {
            "name": "app\\server\\models\\GroupModel.js",
            "modules": {},
            "classes": {
                "GroupModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\models\\RoleModel.js": {
            "name": "app\\server\\models\\RoleModel.js",
            "modules": {},
            "classes": {
                "RoleModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\models\\TaxonomyModel.js": {
            "name": "app\\server\\models\\TaxonomyModel.js",
            "modules": {},
            "classes": {
                "TaxonomyModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\models\\TokenModel.js": {
            "name": "app\\server\\models\\TokenModel.js",
            "modules": {},
            "classes": {
                "TokenModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\models\\UserModel.js": {
            "name": "app\\server\\models\\UserModel.js",
            "modules": {},
            "classes": {
                "UserModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\models\\doc.js": {
            "name": "app\\server\\models\\doc.js",
            "modules": {
                "core-models": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\oauth\\accessToken.js": {
            "name": "app\\server\\oauth\\accessToken.js",
            "modules": {},
            "classes": {
                "accessToken": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\oauth\\client.js": {
            "name": "app\\server\\oauth\\client.js",
            "modules": {},
            "classes": {
                "client": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\oauth\\doc.js": {
            "name": "app\\server\\oauth\\doc.js",
            "modules": {
                "core-oauth": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\plugin\\CorePlugin.js": {
            "name": "app\\server\\plugin\\CorePlugin.js",
            "modules": {},
            "classes": {
                "CorePlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\plugin\\CorePluginApi.js": {
            "name": "app\\server\\plugin\\CorePluginApi.js",
            "modules": {},
            "classes": {
                "CorePluginApi": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\plugin\\doc.js": {
            "name": "app\\server\\plugin\\doc.js",
            "modules": {
                "core-plugin": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\providers\\ClientProvider.js": {
            "name": "app\\server\\providers\\ClientProvider.js",
            "modules": {},
            "classes": {
                "ClientProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\providers\\GroupProvider.js": {
            "name": "app\\server\\providers\\GroupProvider.js",
            "modules": {},
            "classes": {
                "GroupProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\providers\\RoleProvider.js": {
            "name": "app\\server\\providers\\RoleProvider.js",
            "modules": {},
            "classes": {
                "RoleProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\providers\\TaxonomyProvider.js": {
            "name": "app\\server\\providers\\TaxonomyProvider.js",
            "modules": {},
            "classes": {
                "TaxonomyProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\providers\\TokenProvider.js": {
            "name": "app\\server\\providers\\TokenProvider.js",
            "modules": {},
            "classes": {
                "TokenProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\providers\\UserProvider.js": {
            "name": "app\\server\\providers\\UserProvider.js",
            "modules": {},
            "classes": {
                "UserProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\providers\\doc.js": {
            "name": "app\\server\\providers\\doc.js",
            "modules": {
                "core-providers": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\servers\\ApplicationServer.js": {
            "name": "app\\server\\servers\\ApplicationServer.js",
            "modules": {},
            "classes": {
                "ApplicationServer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\servers\\ExpressThumbnail.js": {
            "name": "app\\server\\servers\\ExpressThumbnail.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\servers\\Server.js": {
            "name": "app\\server\\servers\\Server.js",
            "modules": {},
            "classes": {
                "Server": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\servers\\WebServiceServer.js": {
            "name": "app\\server\\servers\\WebServiceServer.js",
            "modules": {},
            "classes": {
                "WebServiceServer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\servers\\doc.js": {
            "name": "app\\server\\servers\\doc.js",
            "modules": {
                "core-servers": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\api.js": {
            "name": "app\\server\\api.js",
            "modules": {
                "core": 1
            },
            "classes": {
                "api": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\httpErrors.js": {
            "name": "app\\server\\httpErrors.js",
            "modules": {},
            "classes": {
                "HTTP_ERRORS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\passport.js": {
            "name": "app\\server\\passport.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\path.js": {
            "name": "app\\server\\path.js",
            "modules": {},
            "classes": {
                "path": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\server\\storage.js": {
            "name": "app\\server\\storage.js",
            "modules": {},
            "classes": {
                "storage": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "core-controllers": {
            "name": "core-controllers",
            "submodules": {},
            "elements": {},
            "classes": {
                "ApplicationController": 1,
                "authenticationController": 1,
                "DefaultController": 1,
                "ErrorController": 1,
                "GroupController": 1,
                "I18nController": 1,
                "MenuController": 1,
                "OauthController": 1,
                "RoleController": 1,
                "TaxonomyController": 1,
                "UserController": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app\\server\\controllers\\UserController.js",
            "line": 15,
            "description": "Controllers provide all route actions.",
            "itemtype": "main"
        },
        "core-loaders": {
            "name": "core-loaders",
            "submodules": {},
            "elements": {},
            "classes": {
                "entityLoader": 1,
                "migrationLoader": 1,
                "namespaceLoader": 1,
                "permissionLoader": 1,
                "pluginLoader": 1,
                "routeLoader": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app\\server\\loaders\\routeLoader.js",
            "line": 7,
            "description": "Loaders module includes tools to be able to load configuration found in\ncore and plugins.",
            "itemtype": "main"
        },
        "core-migration": {
            "name": "core-migration",
            "submodules": {},
            "elements": {},
            "classes": {
                "migrationProcess": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app\\server\\migration\\migrationProcess.js",
            "line": 7,
            "description": "Provides functions to execute migration script.",
            "itemtype": "main"
        },
        "core-models": {
            "name": "core-models",
            "submodules": {},
            "elements": {},
            "classes": {
                "ClientModel": 1,
                "GroupModel": 1,
                "RoleModel": 1,
                "TaxonomyModel": 1,
                "TokenModel": 1,
                "UserModel": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app\\server\\models\\UserModel.js",
            "line": 15,
            "description": "Models module includes all core models.",
            "itemtype": "main"
        },
        "core-oauth": {
            "name": "core-oauth",
            "submodules": {},
            "elements": {},
            "classes": {
                "accessToken": 1,
                "client": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app\\server\\oauth\\client.js",
            "line": 7,
            "description": "Oauth 2 implementation.",
            "itemtype": "main"
        },
        "core-plugin": {
            "name": "core-plugin",
            "submodules": {},
            "elements": {},
            "classes": {
                "CorePlugin": 1,
                "CorePluginApi": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app\\server\\plugin\\CorePluginApi.js",
            "line": 15,
            "description": "The Core plugin with its APIs.",
            "itemtype": "main"
        },
        "core-providers": {
            "name": "core-providers",
            "submodules": {},
            "elements": {},
            "classes": {
                "ClientProvider": 1,
                "GroupProvider": 1,
                "RoleProvider": 1,
                "TaxonomyProvider": 1,
                "TokenProvider": 1,
                "UserProvider": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app\\server\\providers\\UserProvider.js",
            "line": 10,
            "description": "Providers module includes all core providers.",
            "itemtype": "main"
        },
        "core-servers": {
            "name": "core-servers",
            "submodules": {},
            "elements": {},
            "classes": {
                "ApplicationServer": 1,
                "Server": 1,
                "WebServiceServer": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app\\server\\servers\\WebServiceServer.js",
            "line": 22,
            "description": "Servers module includes all different servers defined by openveo (HTTP and Web Socket).",
            "itemtype": "main"
        },
        "core": {
            "name": "core",
            "submodules": {},
            "elements": {},
            "classes": {
                "api": 1,
                "HTTP_ERRORS": 1,
                "path": 1,
                "storage": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "app\\server\\storage.js",
            "line": 7
        }
    },
    "classes": {
        "ApplicationController": {
            "name": "ApplicationController",
            "shortname": "ApplicationController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app\\server\\controllers\\ApplicationController.js",
            "line": 15,
            "description": "Defines an entity controller to handle requests relative to the Web Service client applications and scopes.",
            "extends": "EntityController",
            "is_constructor": 1
        },
        "authenticationController": {
            "name": "authenticationController",
            "shortname": "authenticationController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app\\server\\controllers\\AuthenticationController.js",
            "line": 92,
            "description": "Defines a controller to handlerequests relative to back end authentication.",
            "extends": "Controller",
            "is_constructor": 1
        },
        "DefaultController": {
            "name": "DefaultController",
            "shortname": "DefaultController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app\\server\\controllers\\DefaultController.js",
            "line": 14,
            "description": "Defines a controller to handle request relative to AngularJS single page application.",
            "extends": "Controller",
            "is_constructor": 1
        },
        "ErrorController": {
            "name": "ErrorController",
            "shortname": "ErrorController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app\\server\\controllers\\ErrorController.js",
            "line": 14,
            "description": "Defines a controller to handle errors.",
            "extends": "Controller",
            "is_constructor": 1
        },
        "GroupController": {
            "name": "GroupController",
            "shortname": "GroupController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app\\server\\controllers\\GroupController.js",
            "line": 14,
            "description": "Defines an entity controller to handle requests relative to groups' entities.",
            "extends": "EntityController",
            "is_constructor": 1
        },
        "I18nController": {
            "name": "I18nController",
            "shortname": "I18nController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app\\server\\controllers\\I18nController.js",
            "line": 12,
            "description": "Defines a controller to handle requests relative to internationalization.",
            "extends": "Controller",
            "is_constructor": 1
        },
        "MenuController": {
            "name": "MenuController",
            "shortname": "MenuController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app\\server\\controllers\\MenuController.js",
            "line": 97,
            "description": "Defines a controller to handle requests relative to the back end menu.",
            "extends": "Controller",
            "is_constructor": 1
        },
        "OauthController": {
            "name": "OauthController",
            "shortname": "OauthController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app\\server\\controllers\\OAuthController.js",
            "line": 47,
            "description": "Defines a controller to handle requests relative to Web Service authentication.",
            "extends": "Controller",
            "is_constructor": 1
        },
        "RoleController": {
            "name": "RoleController",
            "shortname": "RoleController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app\\server\\controllers\\RoleController.js",
            "line": 14,
            "description": "Defines an entity controller to handle requests relative to roles' entities.",
            "extends": "EntityController",
            "is_constructor": 1
        },
        "TaxonomyController": {
            "name": "TaxonomyController",
            "shortname": "TaxonomyController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app\\server\\controllers\\TaxonomyController.js",
            "line": 15,
            "description": "Defines an entity controller to handle requests relative to taxonomies' entities.",
            "extends": "EntityController",
            "is_constructor": 1
        },
        "UserController": {
            "name": "UserController",
            "shortname": "UserController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-controllers",
            "namespace": "",
            "file": "app\\server\\controllers\\UserController.js",
            "line": 15,
            "description": "Defines an entity controller to handle requests relative to users' entities.",
            "extends": "EntityController",
            "is_constructor": 1
        },
        "entityLoader": {
            "name": "entityLoader",
            "shortname": "entityLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-loaders",
            "namespace": "",
            "file": "app\\server\\loaders\\entityLoader.js",
            "line": 7,
            "description": "Provides functions to interpret entities definition from plugin's configuration.",
            "static": 1
        },
        "migrationLoader": {
            "name": "migrationLoader",
            "shortname": "migrationLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-loaders",
            "namespace": "",
            "file": "app\\server\\loaders\\migrationLoader.js",
            "line": 7,
            "description": "Provides functions to load migration script.",
            "static": 1
        },
        "namespaceLoader": {
            "name": "namespaceLoader",
            "shortname": "namespaceLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-loaders",
            "namespace": "",
            "file": "app\\server\\loaders\\namespaceLoader.js",
            "line": 7,
            "description": "Provides functions to load namespaces from core and plugins configuration.",
            "static": 1
        },
        "permissionLoader": {
            "name": "permissionLoader",
            "shortname": "permissionLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-loaders",
            "namespace": "",
            "file": "app\\server\\loaders\\permissionLoader.js",
            "line": 7,
            "description": "Provides functions to interpret permissions definition from core and plugins.\n\nPermissions comes from 2 different things :\n - Core and plugin's configuration files\n - Groups of users which are entities",
            "static": 1
        },
        "pluginLoader": {
            "name": "pluginLoader",
            "shortname": "pluginLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-loaders",
            "namespace": "",
            "file": "app\\server\\loaders\\pluginLoader.js",
            "line": 7,
            "description": "Provides functions to load openveo plugins.",
            "static": 1
        },
        "routeLoader": {
            "name": "routeLoader",
            "shortname": "routeLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-loaders",
            "namespace": "",
            "file": "app\\server\\loaders\\routeLoader.js",
            "line": 7,
            "description": "Provides functions to load routes from core and plugins\nconfiguration.",
            "static": 1
        },
        "migrationProcess": {
            "name": "migrationProcess",
            "shortname": "migrationProcess",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-migration",
            "namespace": "",
            "file": "app\\server\\migration\\migrationProcess.js",
            "line": 7,
            "description": "Provides functions to execute migration script.",
            "mainName": "core-migration",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "static": 1
        },
        "ClientModel": {
            "name": "ClientModel",
            "shortname": "ClientModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-models",
            "namespace": "",
            "file": "app\\server\\models\\ClientModel.js",
            "line": 12,
            "description": "Defines a ClientModel to manipulate Web Service client applications.",
            "extends": "EntityModel",
            "is_constructor": 1,
            "params": [
                {
                    "name": "provider",
                    "description": "The entity provider",
                    "type": "ClientProvider"
                }
            ]
        },
        "GroupModel": {
            "name": "GroupModel",
            "shortname": "GroupModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-models",
            "namespace": "",
            "file": "app\\server\\models\\GroupModel.js",
            "line": 13,
            "description": "Defines a GroupModel to manipulate groups.",
            "extends": "EntityModel",
            "is_constructor": 1,
            "params": [
                {
                    "name": "provider",
                    "description": "The entity provider",
                    "type": "GroupProvider"
                }
            ]
        },
        "RoleModel": {
            "name": "RoleModel",
            "shortname": "RoleModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-models",
            "namespace": "",
            "file": "app\\server\\models\\RoleModel.js",
            "line": 11,
            "description": "Defines a RoleModel to manipulate user roles for back end permissions.",
            "extends": "EntityModel",
            "is_constructor": 1,
            "params": [
                {
                    "name": "provider",
                    "description": "The entity provider",
                    "type": "RoleProvider"
                }
            ]
        },
        "TaxonomyModel": {
            "name": "TaxonomyModel",
            "shortname": "TaxonomyModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-models",
            "namespace": "",
            "file": "app\\server\\models\\TaxonomyModel.js",
            "line": 7,
            "description": "Defines a TaxonomyModel to manipulate taxonomies.",
            "extends": "EntityModel"
        },
        "TokenModel": {
            "name": "TokenModel",
            "shortname": "TokenModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-models",
            "namespace": "",
            "file": "app\\server\\models\\TokenModel.js",
            "line": 10,
            "description": "Defines a TokenModel to manipulate tokens for Web Service authentication.",
            "extends": "EntityModel",
            "is_constructor": 1,
            "params": [
                {
                    "name": "provider",
                    "description": "The entity provider",
                    "type": "TokenProvider"
                }
            ]
        },
        "UserModel": {
            "name": "UserModel",
            "shortname": "UserModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-models",
            "namespace": "",
            "file": "app\\server\\models\\UserModel.js",
            "line": 15,
            "description": "Defines a UserModel to manipulate back end users.",
            "extends": "EntityModel",
            "is_constructor": 1,
            "params": [
                {
                    "name": "provider",
                    "description": "The entity provider",
                    "type": "UserProvider"
                }
            ]
        },
        "accessToken": {
            "name": "accessToken",
            "shortname": "accessToken",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-oauth",
            "namespace": "",
            "file": "app\\server\\oauth\\accessToken.js",
            "line": 7,
            "description": "Provides functions to interface oauth tokens and openveo Web Service.",
            "static": 1
        },
        "client": {
            "name": "client",
            "shortname": "client",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-oauth",
            "namespace": "",
            "file": "app\\server\\oauth\\client.js",
            "line": 7,
            "description": "Provides functions to interface oauth clients and openveo Web Service.",
            "static": 1
        },
        "CorePlugin": {
            "name": "CorePlugin",
            "shortname": "CorePlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-plugin",
            "namespace": "",
            "file": "app\\server\\plugin\\CorePlugin.js",
            "line": 12,
            "description": "Defines the Core Plugin.\n\nIn some way, the core act just like any other plugins, it has a 3 routers (public, private and web service) and\na configuration file. Core plugin can be loaded just like any plugin.",
            "extends": "Plugin",
            "is_constructor": 1
        },
        "CorePluginApi": {
            "name": "CorePluginApi",
            "shortname": "CorePluginApi",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-plugin",
            "namespace": "",
            "file": "app\\server\\plugin\\CorePluginApi.js",
            "line": 15,
            "description": "Defines the Core Plugin API exposed to other plugins.",
            "extends": "PluginApi",
            "is_constructor": 1
        },
        "ClientProvider": {
            "name": "ClientProvider",
            "shortname": "ClientProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-providers",
            "namespace": "",
            "file": "app\\server\\providers\\ClientProvider.js",
            "line": 10,
            "description": "Defines a ClientProvider to get and save Web Service client applications.",
            "extends": "EntityProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "GroupProvider": {
            "name": "GroupProvider",
            "shortname": "GroupProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-providers",
            "namespace": "",
            "file": "app\\server\\providers\\GroupProvider.js",
            "line": 10,
            "description": "Defines a GroupProvider to get and save content groups.",
            "extends": "EntityProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "RoleProvider": {
            "name": "RoleProvider",
            "shortname": "RoleProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-providers",
            "namespace": "",
            "file": "app\\server\\providers\\RoleProvider.js",
            "line": 10,
            "description": "Defines a RoleProvider to get and save back end user roles.",
            "extends": "EntityProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "TaxonomyProvider": {
            "name": "TaxonomyProvider",
            "shortname": "TaxonomyProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-providers",
            "namespace": "",
            "file": "app\\server\\providers\\TaxonomyProvider.js",
            "line": 10,
            "description": "Defines a TaxonomyProvider to get and save taxonomies.",
            "extends": "EntityProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "TokenProvider": {
            "name": "TokenProvider",
            "shortname": "TokenProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-providers",
            "namespace": "",
            "file": "app\\server\\providers\\TokenProvider.js",
            "line": 10,
            "description": "Defines a TokenProvider to get and save Web Service tokens.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "UserProvider": {
            "name": "UserProvider",
            "shortname": "UserProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-providers",
            "namespace": "",
            "file": "app\\server\\providers\\UserProvider.js",
            "line": 10,
            "description": "Defines a UserProvider to get and save back end users.",
            "extends": "EntityProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "ApplicationServer": {
            "name": "ApplicationServer",
            "shortname": "ApplicationServer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-servers",
            "namespace": "",
            "file": "app\\server\\servers\\ApplicationServer.js",
            "line": 50,
            "description": "Defines an HTTP server for the openveo application, which serves front and back end pages.",
            "extends": "Server",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configuration",
                    "description": "Service configuration",
                    "type": "Object",
                    "props": [
                        {
                            "name": "sessionSecret",
                            "description": "Hash to encrypt sessions",
                            "type": "String"
                        },
                        {
                            "name": "httpPort",
                            "description": "HTTP server port",
                            "type": "Number"
                        },
                        {
                            "name": "socketPort",
                            "description": "Socket server port",
                            "type": "Number"
                        }
                    ]
                }
            ]
        },
        "Server": {
            "name": "Server",
            "shortname": "Server",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-servers",
            "namespace": "",
            "file": "app\\server\\servers\\Server.js",
            "line": 9,
            "description": "Defines an HTTP Server. This Class must not be used directly,\ninstead use one of the sub classes.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configuration",
                    "description": "Service configuration",
                    "type": "Object"
                }
            ]
        },
        "WebServiceServer": {
            "name": "WebServiceServer",
            "shortname": "WebServiceServer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core-servers",
            "namespace": "",
            "file": "app\\server\\servers\\WebServiceServer.js",
            "line": 22,
            "description": "Defines an HTTP server for the web service.",
            "extends": "Server",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configuration",
                    "description": "Service configuration",
                    "type": "Object",
                    "props": [
                        {
                            "name": "port",
                            "description": "Web service HTTP server port",
                            "type": "Number"
                        }
                    ]
                }
            ]
        },
        "api": {
            "name": "api",
            "shortname": "api",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "app\\server\\api.js",
            "line": 9,
            "description": "API manipulates the list of loaded plugins and exposes their APIs.",
            "static": 1
        },
        "HTTP_ERRORS": {
            "name": "HTTP_ERRORS",
            "shortname": "HTTP_ERRORS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "app\\server\\httpErrors.js",
            "line": 7,
            "description": "The list of HTTP errors with, for each error, its associated\nhexadecimal code and HTTP return code.\nHTTP errors are sent by {{#crossLinkModule \"controllers\"}}{{/crossLinkModule}}.",
            "example": [
                "\n    var httpErrors = process.require('app/server/httpErrors.js');\n    console.log(httpErrors.UNKNOWN_ERROR);"
            ],
            "static": 1
        },
        "path": {
            "name": "path",
            "shortname": "path",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "app\\server\\path.js",
            "line": 7,
            "description": "Provides functions to manipulate HTTP paths handled by the server.",
            "static": 1
        },
        "storage": {
            "name": "storage",
            "shortname": "storage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "app\\server\\storage.js",
            "line": 7,
            "description": "Storage is a global context for the core.",
            "static": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "app\\server\\controllers\\ApplicationController.js",
            "line": 29,
            "description": "Gets the list of scopes and return it as a JSON object.",
            "itemtype": "method",
            "name": "getScopesAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                }
            ],
            "class": "ApplicationController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\ApplicationController.js",
            "line": 52,
            "description": "Gets a list of applications.",
            "itemtype": "method",
            "name": "getEntitiesAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "query",
                            "description": "Request's query parameters",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "query",
                                    "description": "Search query to search on application name",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "page",
                                    "description": "The expected page in pagination system",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "1"
                                },
                                {
                                    "name": "limit",
                                    "description": "The maximum number of expected results",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sortBy",
                                    "description": "To sort by property name (only \"name\" is available right now)",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "name"
                                },
                                {
                                    "name": "sortOrder",
                                    "description": "The sort order (either \"asc\" or \"desc\")",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "desc"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "ApplicationController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\ApplicationController.js",
            "line": 116,
            "description": "Gets an instance of the entity model associated to the controller.",
            "itemtype": "method",
            "name": "getModel",
            "return": {
                "description": "The entity model",
                "type": "EntityModel"
            },
            "class": "ApplicationController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\AuthenticationController.js",
            "line": 15,
            "description": "Retrieves, recursively, the permission corresponding to the couple url / http method.",
            "example": [
                "\n    var permissions = [\n      {\n        label: 'Permissions group',\n        permissions: [\n          {\n            id: 'perm-1',\n            name: 'Name of the permission',\n            description: 'Description of the permission',\n            paths: [ 'get /publishVideo' ]\n          }\n        ]\n      }\n    ];\n    getPermissionByUrl(permissions, '/publishVideo', 'GET'); // \"perm-1\"\n    getPermissionByUrl(permissions, '/video', 'GET'); // null"
            ],
            "itemtype": "method",
            "name": "getPermissionByUrl",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "permissions",
                    "description": "The list of permissions",
                    "type": "Array"
                },
                {
                    "name": "url",
                    "description": "An url",
                    "type": "String"
                },
                {
                    "name": "httpMethod",
                    "description": "The http method (POST, GET, PUT, DELETE)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The permission id if found, null otherwise",
                "type": "String"
            },
            "class": "authenticationController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\AuthenticationController.js",
            "line": 72,
            "description": "Checks if asked page is the user profile.\n\nAll users must have access to its profile.",
            "itemtype": "method",
            "name": "isUserProfileUrl",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "request",
                    "description": "The express request object handled by the server",
                    "type": "Object",
                    "props": [
                        {
                            "name": "user",
                            "description": "The connected user",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The connected user id",
                                    "type": "String"
                                },
                                {
                                    "name": "locked",
                                    "description": "true if user is locked, false otherwise",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "method",
                            "description": "Request's HTTP method",
                            "type": "String"
                        },
                        {
                            "name": "path",
                            "description": "Request's path",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "true if the page is the user profile page, false otherwise",
                "type": "Boolean"
            },
            "class": "authenticationController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\AuthenticationController.js",
            "line": 106,
            "description": "Establishes requests authentication using module passport.\n\nIf authentication fails, an HTTP code 401 is returned to the client.\nIf authentication succeeds, an HTTP code 200 is returned to the\nclient with user information as a JSON Object.",
            "itemtype": "method",
            "name": "authenticateAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "authenticationController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\AuthenticationController.js",
            "line": 144,
            "description": "Removes requests authentication, requests are not authenticated\nanymore.\n\nAn HTTP code 200 is returned to the client with no content.",
            "itemtype": "method",
            "name": "logoutAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "authenticationController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\AuthenticationController.js",
            "line": 160,
            "description": "Checks if current request is authenticated.\n\nIf not send back an HTTP code 401 with appropriate page.\nIt just get to the next route action if permission is granted.",
            "itemtype": "method",
            "name": "restrictAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "url",
                            "description": "Request's url",
                            "type": "String"
                        },
                        {
                            "name": "method",
                            "description": "Request's method",
                            "type": "String"
                        },
                        {
                            "name": "user",
                            "description": "The connected user",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The connected user id",
                                    "type": "String"
                                },
                                {
                                    "name": "permissions",
                                    "description": "The connected user permissions",
                                    "type": "Array"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "authenticationController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\AuthenticationController.js",
            "line": 210,
            "description": "Gets the tree of groups / permissions and return it as a JSON object.",
            "itemtype": "method",
            "name": "getPermissionsAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "authenticationController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\DefaultController.js",
            "line": 28,
            "description": "Handles back office default action to display main HTML.\n\nIf no other action were performed display the main back\noffice template.\nConfiguration files of the openveo plugin and openveo sub plugins\nare used to retrieve the list of files to load within the template.\nJavaScript libraries, JavaScript files and CSS files.",
            "itemtype": "method",
            "name": "defaultAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "DefaultController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\ErrorController.js",
            "line": 28,
            "description": "Handles requests which does not correspond to anything.",
            "itemtype": "method",
            "name": "notFoundAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "ErrorController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\ErrorController.js",
            "line": 40,
            "description": "Handles all errors.",
            "itemtype": "method",
            "name": "errorAction",
            "params": [
                {
                    "name": "error",
                    "description": "An error object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "httCode",
                            "description": "The code HTTP to return for this error",
                            "type": "Number"
                        },
                        {
                            "name": "message",
                            "description": "The message with the error",
                            "type": "Number"
                        },
                        {
                            "name": "code",
                            "description": "The error code",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "UNKNOWN_ERROR"
                        },
                        {
                            "name": "module",
                            "description": "The name of the plugin the error belongs to",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "core"
                        }
                    ]
                },
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "method",
                            "description": "Request's HTTP method",
                            "type": "Request"
                        },
                        {
                            "name": "url",
                            "description": "Request's url",
                            "type": "Request"
                        },
                        {
                            "name": "headers",
                            "description": "Request's headers",
                            "type": "Request"
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "ErrorController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\ErrorController.js",
            "line": 89,
            "description": "Handles forgotten requests.\n\nDepending on request Accept HTTP header, either an HTML content,\na JSON content or a text content will be returned with a 404 code.",
            "itemtype": "method",
            "name": "notFoundPageAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "method",
                            "description": "Request's HTTP method",
                            "type": "Request"
                        },
                        {
                            "name": "url",
                            "description": "Request's url",
                            "type": "Request"
                        },
                        {
                            "name": "headers",
                            "description": "Request's headers",
                            "type": "Request"
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                }
            ],
            "class": "ErrorController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\GroupController.js",
            "line": 28,
            "description": "Gets a list of groups.",
            "itemtype": "method",
            "name": "getEntitiesAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "query",
                            "description": "Request's query parameters",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "query",
                                    "description": "Search query to search on both group's name and description",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "page",
                                    "description": "The expected page in pagination system",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "1"
                                },
                                {
                                    "name": "limit",
                                    "description": "The maximum number of expected results",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sortBy",
                                    "description": "To sort by property name (either \"name\" or \"description\")",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "name"
                                },
                                {
                                    "name": "sortOrder",
                                    "description": "The sort order (either \"asc\" or \"desc\")",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "desc"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "GroupController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\GroupController.js",
            "line": 92,
            "description": "Gets an instance of the entity model associated to the controller.",
            "itemtype": "method",
            "name": "getModel",
            "return": {
                "description": "The entity model",
                "type": "EntityModel"
            },
            "class": "GroupController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\I18nController.js",
            "line": 26,
            "description": "Gets a public dictionary of translations by its name.",
            "example": [
                "\n    {\n      ENGLISH: 'Anglais',\n      FRENCH: 'Français',\n      ...\n    }\n\nIf no dictionary is found, a JSON 404 Not Found response is send back."
            ],
            "itemtype": "method",
            "name": "getDictionaryAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "dictionary",
                                    "description": "The name of the dictionary",
                                    "type": "String"
                                },
                                {
                                    "name": "code",
                                    "description": "Language code of the dictionary",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "I18nController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\I18nController.js",
            "line": 59,
            "description": "Gets a dictionary, with restricted access, by its name.\n\nTo restrict access to the dictionary, all dictionaries with\nrestricted access must be prefixed by \"admin-\".\nIf no dictionary is found, a JSON 404 Not Found response is send back\nto the client.",
            "itemtype": "method",
            "name": "getAdminDictionaryAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "dictionary",
                                    "description": "The name of the dictionary",
                                    "type": "String"
                                },
                                {
                                    "name": "code",
                                    "description": "Language code of the dictionary",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "I18nController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\MenuController.js",
            "line": 12,
            "description": "Checks if user has the given permission.",
            "itemtype": "method",
            "name": "isAuthorized",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "user",
                    "description": "The user to test",
                    "type": "Object",
                    "props": [
                        {
                            "name": "permissions",
                            "description": "The user's permissions",
                            "type": "Array"
                        }
                    ]
                },
                {
                    "name": "permission",
                    "description": "The permission id to check",
                    "type": "String"
                }
            ],
            "class": "MenuController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\MenuController.js",
            "line": 30,
            "description": "Filters the given menu depending on user permissions and requested\nmenu items permissions.",
            "itemtype": "method",
            "name": "filterMenuByPermissions",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "menu",
                    "description": "The menu to filter",
                    "type": "Array"
                },
                {
                    "name": "user",
                    "description": "The authenticated user",
                    "type": "Object"
                }
            ],
            "class": "MenuController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\MenuController.js",
            "line": 111,
            "description": "Gets the backend menu as a JSON object.\n\nIf menu is empty a 404 Not Found is sent.\nMenu is filtered regarding user permissions.",
            "itemtype": "method",
            "name": "getMenuAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "user",
                            "description": "The connected user",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The connected user id",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "MenuController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\OAuthController.js",
            "line": 14,
            "description": "Retrieves, from list of scopes, the scope corresponding to the couple url / http method.",
            "itemtype": "method",
            "name": "getScopeByUrl",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "An url",
                    "type": "String"
                },
                {
                    "name": "httpMethod",
                    "description": "The http method (POST, GET, PUT, DELETE)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The scope id if found, null otherwise",
                "type": "String"
            },
            "class": "OauthController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\OAuthController.js",
            "line": 61,
            "description": "Validates scopes for the given token depending on requested url.\n\nRevoke access to the service if client does not have permission.",
            "itemtype": "method",
            "name": "validateScopesAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "oauth2",
                            "description": "Request's OAuth information",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "accessToken",
                                    "description": "The connected client's token",
                                    "type": "Object"
                                }
                            ]
                        },
                        {
                            "name": "url",
                            "description": "The request's url",
                            "type": "String"
                        },
                        {
                            "name": "method",
                            "description": "The request's method",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "OauthController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\RoleController.js",
            "line": 28,
            "description": "Gets a list of roles.\n\nParameters :\n - **query** Search query to search in role names\n - **page** The expected page\n - **limit** The expected limit\n - **sortOrder** Sort order (either asc or desc)",
            "itemtype": "method",
            "name": "getEntitiesAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "query",
                            "description": "Request's query parameters",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "limit",
                                    "description": "The maximum number of expected results",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "1"
                                },
                                {
                                    "name": "page",
                                    "description": "The expected page in pagination system",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sortBy",
                                    "description": "The name of the property on which to sort (only \"name\" is available)",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "name"
                                },
                                {
                                    "name": "sortOrder",
                                    "description": "The sort order (either \"asc\" or \"desc\")",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "desc"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "RoleController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\RoleController.js",
            "line": 97,
            "description": "Gets an instance of the entity model associated to the controller.",
            "itemtype": "method",
            "name": "getModel",
            "return": {
                "description": "The entity model",
                "type": "EntityModel"
            },
            "class": "RoleController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\TaxonomyController.js",
            "line": 29,
            "description": "Gets a list of taxonomies.",
            "itemtype": "method",
            "name": "getEntitiesAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "query",
                            "description": "Request's query parameters",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "query",
                                    "description": "Search query to search on taxonomy name",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "page",
                                    "description": "The expected page in pagination system",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "1"
                                },
                                {
                                    "name": "limit",
                                    "description": "The maximum number of expected results",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sortBy",
                                    "description": "To sort by property name (only \"name\" is available right now)",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "name"
                                },
                                {
                                    "name": "sortOrder",
                                    "description": "The sort order (either \"asc\" or \"desc\")",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "desc"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "TaxonomyController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\TaxonomyController.js",
            "line": 93,
            "description": "Gets the list of terms of a taxonomy.",
            "itemtype": "method",
            "name": "getTaxonomyTermsAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The id of the taxonomy to get terms from",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "TaxonomyController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\TaxonomyController.js",
            "line": 129,
            "description": "Gets an instance of the entity model associated to the controller.",
            "itemtype": "method",
            "name": "getModel",
            "return": {
                "description": "The entity model",
                "type": "EntityModel"
            },
            "class": "TaxonomyController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\UserController.js",
            "line": 29,
            "description": "Gets a list of users.",
            "itemtype": "method",
            "name": "getEntitiesAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "query",
                            "description": "Request's query parameters",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "query",
                                    "description": "Search query to search in user names",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "page",
                                    "description": "The expected page in pagination system",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "1"
                                },
                                {
                                    "name": "limit",
                                    "description": "The maximum number of expected results",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "sortBy",
                                    "description": "To sort by property name (only \"name\" is available right now)",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "name"
                                },
                                {
                                    "name": "sortOrder",
                                    "description": "The sort order (either \"asc\" or \"desc\")",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "desc"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "UserController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\UserController.js",
            "line": 93,
            "description": "Updates a user.",
            "itemtype": "method",
            "name": "updateEntityAction",
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "Id of the user to update",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "body",
                            "description": "Request's body",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "name",
                                    "description": "User's name",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "email",
                                    "description": "User's email",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "password",
                                    "description": "User's password",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "passwordValidate",
                                    "description": "User's password validation",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "roles",
                                    "description": "User's roles",
                                    "type": "Array",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "UserController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\controllers\\UserController.js",
            "line": 148,
            "description": "Gets an instance of the entity model associated to the controller.",
            "itemtype": "method",
            "name": "getModel",
            "return": {
                "description": "The entity model",
                "type": "EntityModel"
            },
            "class": "UserController",
            "module": "core-controllers"
        },
        {
            "file": "app\\server\\loaders\\entityLoader.js",
            "line": 14,
            "description": "Builds entities for plugins.",
            "example": [
                "\n    // Results\n    {\n      core: {\n        mountPath: '/',\n        path: '/home/openveo/',\n        entities: {\n          applications: 'app/server/controllers/ApplicationController'\n        }\n      },\n      publish: {\n        mountPath: '/publish',\n        path: '/home/openveo/node_modules/@openveo/publish',\n        entities: {\n          videos: 'app/server/controllers/VideoController'\n        }\n      }\n    }"
            ],
            "itemtype": "method",
            "name": "buildEntities",
            "static": 1,
            "params": [
                {
                    "name": "plugins",
                    "description": "The list of plugins",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The list of entities, for plugins, ordered by plugin name",
                "type": "Object"
            },
            "throws": {
                "description": "A TypeError if plugins is not an array",
                "type": "TypeError"
            },
            "class": "entityLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\entityLoader.js",
            "line": 61,
            "description": "Builds CRUD routes for entities.",
            "example": [
                "\n    // List of entities as described in configuration file\n    {\n      'applications': '/home/openveo/app/server/controllers/ApplicationController'\n    }",
                "\n    // Results\n    {\n      'get /applications/:id': '/home/openveo/app/server/controllers/ApplicationController.getEntityAction',\n      'get /applications': '/home/openveo/app/server/controllers/ApplicationController.getEntitiesAction',\n      'post /applications/:id': '/home/openveo/app/server/controllers/ApplicationController.updateEntityAction',\n      'put /applications': '/home/openveo/app/server/controllers/ApplicationController.addEntityAction',\n      'delete /applications/:id': '/home/openveo/app/server/controllers/ApplicationController.removeEntityAction'\n    }"
            ],
            "itemtype": "method",
            "name": "buildEntitiesRoutes",
            "static": 1,
            "params": [
                {
                    "name": "entities",
                    "description": "The list of entities",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The list of routes for all entities",
                "type": "Object"
            },
            "class": "entityLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\namespaceLoader.js",
            "line": 17,
            "description": "The list of socket controllers path with associated controller instance.\n\nIt is used to instantiate each controller only once.",
            "itemtype": "property",
            "name": "controllers",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "namespaceLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\namespaceLoader.js",
            "line": 29,
            "description": "Attaches handlers to namespace.",
            "example": [
                "\n    var namespaceLoader = process.require('app/server/loaders/namespaceLoader.js');\n    var messagesDescriptors = {\n      test1: 'app/server/controllers/TestSocketController.test1Action',\n      test2: 'app/server/controllers/TestSocketController.test2Action'\n    };\n\n    namespaceLoader.addHandlers(namespace, messagesDescriptors, '/home/openveo/node_modules/openveo-plugin');"
            ],
            "itemtype": "method",
            "name": "addHandlers",
            "static": 1,
            "params": [
                {
                    "name": "namespace",
                    "description": "The socket namespace",
                    "type": "SocketNamespace"
                },
                {
                    "name": "messagesDescriptors",
                    "description": "A list of socket namespace messages with associated controller / action",
                    "type": "Object"
                },
                {
                    "name": "pluginPath",
                    "description": "The root path of the plugin associated to the namespace used to find controllers\nassociated to messages",
                    "type": "String"
                }
            ],
            "class": "namespaceLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\permissionLoader.js",
            "line": 24,
            "description": "Makes sure all permissions of a plugin are prefixed by the name of the plugin.\n\nIf a permission is not prefixed by the name of the plugin, the prefix is automatically added.",
            "itemtype": "method",
            "name": "prefixPermissions",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "pluginName",
                    "description": "Plugin's name",
                    "type": "String"
                },
                {
                    "name": "permissions",
                    "description": "Plugin's permissions",
                    "type": "Object"
                }
            ],
            "class": "permissionLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\permissionLoader.js",
            "line": 46,
            "description": "Generates add/update/delete permissions for entities.\n\nPermission's translation keys for name and description are generated using the formats\n\"PERMISSIONS.{PLUGIN_NAME}_{OPERATION}_{ENTITY_NAME}_NAME\" and\n\"PERMISSIONS.{PLUGIN_NAME}_{OPERATION}_{ENTITY_NAME}_DESCRIPTION\".\n\nContent entities won't generate any permissions.",
            "example": [
                "\n    var permissionLoader= process.require('app/server/loaders/permissionLoader.js');\n    var entities = {\n      {\n        core: {\n          mountPath: '/',\n          path: '/home/openveo/',\n          entities: {\n            applications: 'app/server/controllers/ApplicationController'\n          }\n        },\n        publish: {\n          mountPath: '/publish',\n          path: '/home/openveo/node_modules/@openveo/publish/',\n          entities: {\n            videos: 'app/server/controllers/VideoController'\n          }\n        }\n      }\n    };\n\n    console.log(permissionLoader.generateEntityPermissions(entities));\n    // [\n    //   {\n    //     label: 'CORE.PERMISSIONS.GROUP_APPLICATIONS',\n    //     permissions: [\n    //       {\n    //         id : 'core-add-applications',\n    //         name : 'CORE.PERMISSIONS.ADD_APPLICATIONS_NAME',\n    //         description : 'CORE.PERMISSIONS.ADD_APPLICATIONS_DESCRIPTION',\n    //         paths : [ 'put /applications*' ]\n    //       },\n    //       {\n    //         id : 'core-update-applications',\n    //         name : 'CORE.PERMISSIONS.UPDATE_APPLICATIONS_NAME',\n    //         description : 'CORE.PERMISSIONS.UPDATE_APPLICATIONS_DESCRIPTION',\n    //         paths : [ 'post /applications*' ]\n    //       },\n    //       {\n    //         id : 'core-delete-applications',\n    //         name : 'CORE.PERMISSIONS.DELETE_APPLICATIONS_NAME',\n    //         description : 'CORE.PERMISSIONS.DELETE_APPLICATIONS_DESCRIPTION',\n    //         paths : [ 'delete /applications*' ]\n    //       }\n    //     ]\n    //   },\n    //   {\n    //     label: 'PUBLISH.PERMISSIONS.GROUP_VIDEOS',\n    //     permissions: [\n    //       {\n    //         id : 'publish-add-videos',\n    //         name : 'PUBLISH.PERMISSIONS.ADD_VIDEOS_NAME',\n    //         description : 'PUBLISH.PERMISSIONS.ADD_VIDEOS_DESCRIPTION',\n    //         paths : [ 'put /publish/videos*' ]\n    //       },\n    //       {\n    //         id : 'publish-update-videos',\n    //         name : 'PUBLISH.PERMISSIONS.UPDATE_VIDEOS_NAME',\n    //         description : 'PUBLISH.PERMISSIONS.UPDATE_VIDEOS_DESCRIPTION',\n    //         paths : [ 'post /publish/videos*' ]\n    //       },\n    //       {\n    //         id : 'publish-delete-videos',\n    //         name : 'PUBLISH.PERMISSIONS.DELETE_VIDEOS_NAME',\n    //         description : 'PUBLISH.PERMISSIONS.DELETE_VIDEOS_DESCRIPTION',\n    //         paths : [ 'delete /publish/videos*' ]\n    //       }\n    //     ]\n    //   }\n    // ]"
            ],
            "itemtype": "method",
            "name": "generateEntityPermissions",
            "static": 1,
            "params": [
                {
                    "name": "pluginsEntities",
                    "description": "The list of entities ordered by plugins",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Permissions for all entities",
                "type": "Object"
            },
            "class": "permissionLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\permissionLoader.js",
            "line": 178,
            "description": "Builds entities' scopes.",
            "example": [
                "\n    // List of entities by plugin\n    {\n      publish: {\n        mountPath: '/publish',\n        path: '/home/openveo/node_modules/@openveo/publish',\n        entities: {\n          videos: 'app/server/controllers/VideoController'\n        }\n      }\n    }",
                "\n    // Result\n    [\n      {\n        id: 'publish-get-videos',\n        name: 'PUBLISH.WS_SCOPES.GET_VIDEOS_NAME',\n        description: 'PUBLISH.WS_SCOPES.GET_VIDEOS_DESCRIPTON',\n        paths: [\n          'get /publish/videos*'\n        ]\n      },\n      {\n        id: 'publish-add-videos',\n        name: 'PUBLISH.WS_SCOPES.ADD_VIDEOS_NAME',\n        description: 'PUBLISH.WS_SCOPES.ADD_VIDEOS_DESCRIPTON',\n        paths: [\n          'put /publish/videos*'\n        ]\n      },\n      {\n        id: 'publish-update-videos',\n        name: 'PUBLISH.WS_SCOPES.UPDATE_VIDEOS_NAME',\n        description: 'PUBLISH.WS_SCOPES.UPDATE_VIDEOS_DESCRIPTON',\n        paths: [\n          'post /publish/videos*'\n        ]\n      },\n      {\n        id: 'publish-delete-videos',\n        name: 'PUBLISH.WS_SCOPES.DELETE_VIDEOS_NAME',\n        description: 'PUBLISH.WS_SCOPES.DELETE_VIDEOS_DESCRIPTON',\n        paths: [\n          'delete /publish/videos*'\n        ]\n      }\n    ]"
            ],
            "itemtype": "method",
            "name": "generateEntityScopes",
            "static": 1,
            "params": [
                {
                    "name": "pluginsEntities",
                    "description": "The list of entities",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The list of web service scopes for all entities exposed by all plugins",
                "type": "Array"
            },
            "class": "permissionLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\permissionLoader.js",
            "line": 273,
            "description": "Generates permissions using groups.\n\nPermission's translation keys for name and description are generated\nusing the formats \"GROUP_{OPERATION}_NAME\" and\n\"{GROUP}_{OPERATION}_DESCRIPTION\".",
            "example": [
                "\n    var permissionLoader= process.require('app/server/loaders/permissionLoader.js');\n\n    permissionLoader.generateGroupPermissions(function() {\n       // [\n       //   {\n       //     label: 'My group name',\n       //     permissions: [\n       //       {\n       //         id : 'get-group-groupID',\n       //         name : 'CORE.PERMISSIONS.GROUP_GET_NAME',\n       //         description : 'CORE.PERMISSIONS.GROUP_GET_DESCRIPTION'\n       //       },\n       //       {\n       //         id : 'update-group-groupID',\n       //         name : 'CORE.PERMISSIONS.GROUP_UPDATE_NAME',\n       //         description : 'CORE.PERMISSIONS.GROUP_UPDATE_DESCRIPTION'\n       //       },\n       //       {\n       //         id : 'delete-group-groupID',\n       //         name : 'CORE.PERMISSIONS.GROUP_DELETE_NAME',\n       //         description : 'CORE.PERMISSIONS.GROUP_DELETE_DESCRIPTION'\n       //       }\n       //     ]\n       //   }\n       // ]\n\n    });"
            ],
            "itemtype": "method",
            "name": "generateGroupPermissions",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when its done with :\n - **Array** The list of group permissions",
                    "type": "Function"
                }
            ],
            "class": "permissionLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\permissionLoader.js",
            "line": 334,
            "description": "Creates permissions for a group.",
            "itemtype": "method",
            "name": "createGroupPermissions",
            "params": [
                {
                    "name": "id",
                    "description": "The group id",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "The group name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The group permissions",
                "type": "Object"
            },
            "throws": {
                "description": "An error if required parameters are not specified",
                "type": "TypeError"
            },
            "class": "permissionLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\permissionLoader.js",
            "line": 367,
            "description": "Reorganizes orphaned top permissions into a generic group.",
            "example": [
                "\n    var permissionLoader= process.require('app/server/loaders/permissionLoader.js');\n    var permissions = [\n      {\n        'id' : 'orphaned-permission',\n        'name' : 'ORPHANED_PERM_NAME',\n        'description' : 'ORPHANED_PERM_DESCRIPTION'\n      }\n    ];\n    console.log(permissionLoader.groupOrphanedPermissions(permissions));\n    // [\n    //   {\n    //     label: 'CORE.PERMISSIONS.GROUP_OTHERS',\n    //     permissions: [\n    //       {\n    //         'id' : 'orphaned-permission',\n    //         'name' : 'ORPHANED_PERM_NAME',\n    //         'description' : 'ORPHANED_PERM_DESCRIPTION'\n    //       }\n    //     ]\n    //   }\n    // ]"
            ],
            "itemtype": "method",
            "name": "groupOrphanedPermissions",
            "static": 1,
            "params": [
                {
                    "name": "permissions",
                    "description": "The list of permissions with group\npermissions and eventually orphaned permission not attached to any group",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The same list of permissions except that orphaned\npermissions are extracted into a generic group",
                "type": "Object"
            },
            "throws": {
                "description": "An error if permissions is not a valid array",
                "type": "TypeError"
            },
            "class": "permissionLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\permissionLoader.js",
            "line": 437,
            "description": "Builds the list of scopes.",
            "itemtype": "method",
            "name": "buildScopes",
            "static": 1,
            "params": [
                {
                    "name": "entities",
                    "description": "Entities to build scopes from",
                    "type": "Object"
                },
                {
                    "name": "plugins",
                    "description": "The list of plugins",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The list of generated scopes",
                "type": "Array"
            },
            "class": "permissionLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\permissionLoader.js",
            "line": 460,
            "description": "Builds the list of permissions.\n\nadd/delete/update permissions are generated for each entity and get/update/delete permissions are\ncreated for each group.\n\nOrphaned permissions are grouped in a generic group of permissions.",
            "itemtype": "method",
            "name": "buildPermissions",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "entities",
                    "description": "Entities to build permissions from",
                    "type": "Object"
                },
                {
                    "name": "plugins",
                    "description": "The list of plugins",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done with :\n - **Error** An error if something went wrong\n - **Array** The list of generated persmissions",
                    "type": "Function"
                }
            ],
            "class": "permissionLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\pluginLoader.js",
            "line": 21,
            "description": "Filters the list of plugins paths in case the same plugin appears\nmultiple time at different paths. Filters to keep only the most\ntop level one.",
            "example": [
                "\n    var pluginsPaths = [\n      '/openveo/node_modules/@openveo/plugin1',\n      '/openveo/node_modules/@openveo/plugin2/node_modules/@openveo/plugin1'\n    ];\n    console.log(filterPluginsPaths(pluginsPaths));\n    // [ '/openveo/node_modules/@openveo/plugin1' ]"
            ],
            "itemtype": "method",
            "name": "filterPluginsPaths",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "pluginsPaths",
                    "description": "The list of plugins paths to analyze",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The filtered list of plugins paths",
                "type": "Array"
            },
            "class": "pluginLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\pluginLoader.js",
            "line": 77,
            "description": "Recursively and asynchronously analyze the given directory to get\nnpm plugins.\n\nThere are two kinds of plugins : plugins maintained by the core team (under @openveo scope)\nand contributers' plugins which must be prefixed by **openveo-**.",
            "example": [
                "\n    getPluginPaths('/openveo', function(error, pluginsPaths){\n      console.log(pluginsPaths);\n      // [\n      //   '/openveo/node_modules/@openveo/plugin',\n      //   '/openveo/node_modules/openveo-contrib-plugin'\n      // ]\n    };"
            ],
            "itemtype": "method",
            "name": "getPluginPaths",
            "static": 1,
            "params": [
                {
                    "name": "startingPath",
                    "description": "Root path of an NPM module from where looking for plugins",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A callback with two arguments :\n   - **Error** An Error object or null\n   - **Array** The list of plugins paths",
                    "type": "Function"
                }
            ],
            "throws": {
                "description": "An error if starting path is not a valid string",
                "type": "TypeError"
            },
            "class": "pluginLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\pluginLoader.js",
            "line": 204,
            "description": "Recursively and asynchronously load all offical and contributed OpenVeo plugins under the given path.\n\nIf the same plugin (same name) is encountered several times, the top level one\nwill be kept.",
            "example": [
                "\n    var pluginLoader = process.require('app/server/loaders/pluginLoader.js');\n\n    // Load all potential openveo plugins from directory /home/openveo/openveo\n    pluginLoader.loadPlugins('/home/openveo/openveo', function(error, plugins){\n      console.log(plugins);\n    };"
            ],
            "itemtype": "method",
            "name": "loadPlugins",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "startingPath",
                    "description": "Root path of an NPM module from where looking for plugins",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A callback with two arguments :\n   - **Error** An Error object or null\n   - **Array** A list of Plugin objects",
                    "type": "Function"
                }
            ],
            "throws": {
                "description": "An error if starting path is not a valid string",
                "type": "TypeError"
            },
            "class": "pluginLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\pluginLoader.js",
            "line": 280,
            "description": "Loads a single plugin by its path.",
            "example": [
                "\n    var pluginLoader = process.require('app/server/loaders/pluginLoader.js');\n\n    // Load a plugin\n    pluginLoader.loadPlugin('/node_modules/@openveo/publish', function(error, loadedPlugin){\n      console.log(loadedPlugin);\n    }"
            ],
            "itemtype": "method",
            "name": "loadPlugin",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "pluginPath",
                    "description": "Absolute path to the plugin directory",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A callback with two arguments :\n   - **Error** An Error object or null\n   - **Plugin** The loaded plugin or null",
                    "type": "Function"
                }
            ],
            "throws": {
                "description": "An error if plugin path or starting path is not a valid string",
                "type": "TypeError"
            },
            "class": "pluginLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\pluginLoader.js",
            "line": 369,
            "description": "Loads plugin's configuration.",
            "itemtype": "method",
            "name": "loadPluginMetadata",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "plugin",
                    "description": "The plugin",
                    "type": "Plugin"
                },
                {
                    "name": "callback",
                    "description": "A callback with :\n   - **Error** An Error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "pluginLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\routeLoader.js",
            "line": 21,
            "description": "Gets the list of routes from a route configuration object with,\nfor each one, the method, the path and the action to call.",
            "example": [
                "\n    var routeLoader = process.require('app/server/loaders/routeLoader.js');\n    var routes = {\n      'get /test' : 'app/server/controllers/TestController.getTestAction',\n      'post /test' : 'app/server/controllers/TestController.postTestAction'\n    };\n\n    console.log(routeLoader.decodeRoutes('/', routes));\n    // [\n    //   {\n    //     method: 'get',\n    //     path: '/test',\n    //     action: Function\n    //   },\n    //   {\n    //     method: 'post',\n    //     path: 'test',\n    //     action: Function\n    //   }\n    // ]"
            ],
            "itemtype": "method",
            "name": "decodeRoutes",
            "static": 1,
            "params": [
                {
                    "name": "pluginPath",
                    "description": "The root path of the plugin associated to the routes",
                    "type": "String"
                },
                {
                    "name": "routes",
                    "description": "An object of routes",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The decoded list of routes",
                "type": "Array"
            },
            "throws": {
                "description": "If one of the route controllers is not a Controller",
                "type": "TypeError"
            },
            "class": "routeLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\loaders\\routeLoader.js",
            "line": 138,
            "description": "Applies a list of routes to a router.",
            "example": [
                "\n    var router = express.Router();\n    var routeLoader = process.require('app/server/loaders/routeLoader.js');\n    var routes = [\n      {\n        method: 'get',\n        path: '/logout',\n        action: [Function]\n      }\n    ];\n    routeLoader.applyRoutes(routes, router);"
            ],
            "itemtype": "method",
            "name": "applyRoutes",
            "static": 1,
            "params": [
                {
                    "name": "routes",
                    "description": "The list of routes to apply",
                    "type": "Array"
                },
                {
                    "name": "router",
                    "description": "An express router to attach the routes to",
                    "type": "Object"
                }
            ],
            "class": "routeLoader",
            "module": "core-loaders"
        },
        {
            "file": "app\\server\\migration\\migrationProcess.js",
            "line": 19,
            "description": "Saves in core_system table the last migration successfull done.",
            "itemtype": "method",
            "name": "saveMigrationVersion",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of module (core, publish...)",
                    "type": "String"
                },
                {
                    "name": "version",
                    "description": "Version of the script successfully executed",
                    "type": "String"
                },
                {
                    "name": "db",
                    "description": "DB instance to update value",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "callback A callback with 1 arguments :\n   - **Error** An Error object or null",
                    "type": "Function"
                }
            ],
            "class": "migrationProcess",
            "module": "core-migration"
        },
        {
            "file": "app\\server\\migration\\migrationProcess.js",
            "line": 46,
            "description": "Creates async series according to migration script order.",
            "itemtype": "method",
            "name": "createMigrationSeries",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "module",
                    "description": "Script collection to execute\n exemple: {\n   1.1.0 : 'path/to/migration/1.1.0.js',\n   1.2.0 : 'path/to/migration/1.2.0.js'\n }",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "Name of module (core, publish...)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of synchronous function to execute",
                "type": "Array"
            },
            "class": "migrationProcess",
            "module": "core-migration"
        },
        {
            "file": "app\\server\\migration\\migrationProcess.js",
            "line": 81,
            "description": "Executes a collection of migration script.",
            "itemtype": "method",
            "name": "executeMigrationScript",
            "params": [
                {
                    "name": "migrations",
                    "description": "migrations object to execute\n exemple:\n {\n   core:{\n     1.1.0: 'path/to/migration/1.1.0.js',\n     2.0.0: 'path/to/migration/2.0.0.js'\n   },\n   publish:{\n     1.2.0: 'path/to/migration/1.2.0.js',\n     1.3.0: 'path/to/migration/1.3.0.js',\n   }\n }",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "A callback with 1 arguments :\n   - **Error** An Error object or null",
                    "type": "Function"
                }
            ],
            "class": "migrationProcess",
            "module": "core-migration"
        },
        {
            "file": "app\\server\\models\\ClientModel.js",
            "line": 27,
            "description": "Adds a new client to the clients' collection.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "A client object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "Client's name",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "scopes",
                            "description": "Client's scopes",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "id",
                            "description": "Client's id, if not specified id is generated",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of items inserted\n  - **Object** The inserted client",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "ClientModel",
            "module": "core-models"
        },
        {
            "file": "app\\server\\models\\ClientModel.js",
            "line": 54,
            "description": "Updates client application.",
            "itemtype": "method",
            "name": "update",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the client",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The client with all properties to update",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "Client's name",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "scopes",
                            "description": "Client's scopes",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "ClientModel",
            "module": "core-models"
        },
        {
            "file": "app\\server\\models\\GroupModel.js",
            "line": 28,
            "description": "Adds a new group.\n\nEach time a new group is added, 3 new permissions are created create/update/delete and organized in a group of\npermissions.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "Group's data",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "Group's name",
                            "type": "String"
                        },
                        {
                            "name": "description",
                            "description": "Group's description",
                            "type": "String"
                        },
                        {
                            "name": "id",
                            "description": "Group's id, if not specified id is generated",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of items inserted\n  - **Object** The added entity",
                    "type": "Function"
                }
            ],
            "class": "GroupModel",
            "module": "core-models"
        },
        {
            "file": "app\\server\\models\\GroupModel.js",
            "line": 73,
            "description": "Updates a group.\n\nEach time a group is modified, the list of permissions is updated.",
            "itemtype": "method",
            "name": "update",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the entity to update",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Group's data",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "Group's name",
                            "type": "String"
                        },
                        {
                            "name": "description",
                            "description": "Group's description",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "GroupModel",
            "module": "core-models"
        },
        {
            "file": "app\\server\\models\\GroupModel.js",
            "line": 112,
            "description": "Removes one or several groups.\n\nEach time a group is removed, the list of permissions is updated.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "ids",
                    "description": "Id(s) of the document(s) to remove from the collection",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of deleted entities",
                    "type": "Function"
                }
            ],
            "class": "GroupModel",
            "module": "core-models"
        },
        {
            "file": "app\\server\\models\\RoleModel.js",
            "line": 26,
            "description": "Adds a new role.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "A role object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "Role's name",
                            "type": "String"
                        },
                        {
                            "name": "permissions",
                            "description": "Role's permissions",
                            "type": "Array"
                        },
                        {
                            "name": "id",
                            "description": "Role's id, if not specified id is generated",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of items inserted\n  - **Object** The inserted role",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "RoleModel",
            "module": "core-models"
        },
        {
            "file": "app\\server\\models\\RoleModel.js",
            "line": 58,
            "description": "Gets a list of roles by ids.",
            "itemtype": "method",
            "name": "getByIds",
            "async": 1,
            "params": [
                {
                    "name": "roles",
                    "description": "Role ids",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Array** The list of roles",
                    "type": "Function"
                }
            ],
            "class": "RoleModel",
            "module": "core-models"
        },
        {
            "file": "app\\server\\models\\TaxonomyModel.js",
            "line": 17,
            "description": "Creates a TaxonomyModel.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "provider",
                    "description": "The entity provider",
                    "type": "TaxonomyProvider"
                }
            ],
            "class": "TaxonomyModel",
            "module": "core-models"
        },
        {
            "file": "app\\server\\models\\TokenModel.js",
            "line": 25,
            "description": "Adds a new token.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "The token string",
                    "type": "String"
                },
                {
                    "name": "clientId",
                    "description": "The client id the token belongs to",
                    "type": "String"
                },
                {
                    "name": "scopes",
                    "description": "A list of scopes with granted access for this token",
                    "type": "Array"
                },
                {
                    "name": "ttl",
                    "description": "The time to live in milliseconds of the token",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of items inserted\n  - **Object** The inserted token",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "TokenModel",
            "module": "core-models"
        },
        {
            "file": "app\\server\\models\\TokenModel.js",
            "line": 52,
            "description": "Removes all tokens associated to a client id.",
            "itemtype": "method",
            "name": "removeTokensByClientId",
            "async": 1,
            "params": [
                {
                    "name": "clientId",
                    "description": "The id of the client",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of deleted tokens",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "TokenModel",
            "module": "core-models"
        },
        {
            "file": "app\\server\\models\\TokenModel.js",
            "line": 69,
            "description": "Fetch a token by its value.",
            "itemtype": "method",
            "name": "getTokenByValue",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "The token value",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The fetched token",
                    "type": "Function"
                }
            ],
            "class": "TokenModel",
            "module": "core-models"
        },
        {
            "file": "app\\server\\models\\UserModel.js",
            "line": 30,
            "description": "Gets a user by credentials.",
            "itemtype": "method",
            "name": "getUserByCredentials",
            "async": 1,
            "params": [
                {
                    "name": "email",
                    "description": "The email of the user",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "The password of the user",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The user",
                    "type": "Function"
                }
            ],
            "class": "UserModel",
            "module": "core-models"
        },
        {
            "file": "app\\server\\models\\UserModel.js",
            "line": 49,
            "description": "Adds a new user.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "A user object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "User's name",
                            "type": "String"
                        },
                        {
                            "name": "email",
                            "description": "User's email",
                            "type": "String"
                        },
                        {
                            "name": "password",
                            "description": "User's password",
                            "type": "String"
                        },
                        {
                            "name": "passwordValidate",
                            "description": "User's password validation",
                            "type": "String"
                        },
                        {
                            "name": "id",
                            "description": "User's id, if not specified an id will be generated",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "locked",
                            "description": "true to lock user from edition",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of items inserted\n  - **Object** The inserted user",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "UserModel",
            "module": "core-models"
        },
        {
            "file": "app\\server\\models\\UserModel.js",
            "line": 119,
            "description": "Updates a user.",
            "itemtype": "method",
            "name": "update",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the user to update",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "A user object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "email",
                            "description": "User's email",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "password",
                            "description": "User's password",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "passwordValidate",
                            "description": "User's password validation",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "locked",
                            "description": "true to lock user from edition",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "UserModel",
            "module": "core-models"
        },
        {
            "file": "app\\server\\oauth\\accessToken.js",
            "line": 22,
            "description": "Gets TokenModel instance.",
            "itemtype": "method",
            "name": "getTokenModel",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The TokenModel instance",
                "type": "TokenModel"
            },
            "class": "accessToken",
            "module": "core-oauth"
        },
        {
            "file": "app\\server\\oauth\\accessToken.js",
            "line": 36,
            "description": "Creates access token and saves it in database.\n\nIt will previously remove all tokens associated to the client.",
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "userId",
                    "description": "User identifier associated to the OAuth client",
                    "type": "String"
                },
                {
                    "name": "clientId",
                    "description": "OAuth client id",
                    "type": "String"
                },
                {
                    "name": "scopes",
                    "description": "The list of scopes",
                    "type": "Object"
                },
                {
                    "name": "ttl",
                    "description": "Token time to live (in seconds)",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "with :\n - **Object** An error if something went wrong or null if everything is fine\n - **String** The access token",
                    "type": "Function"
                }
            ],
            "class": "accessToken",
            "module": "core-oauth"
        },
        {
            "file": "app\\server\\oauth\\accessToken.js",
            "line": 68,
            "description": "Fetches accessToken object by token.",
            "itemtype": "method",
            "name": "fetchByToken",
            "static": 1,
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "Client's access token",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "with :\n - **Object** An error if something went wrong or null if everything is fine\n - **Object** The access token",
                    "type": "Function"
                }
            ],
            "class": "accessToken",
            "module": "core-oauth"
        },
        {
            "file": "app\\server\\oauth\\accessToken.js",
            "line": 84,
            "description": "Checks if token is valid and not expired.",
            "itemtype": "method",
            "name": "checkTTL",
            "static": 1,
            "params": [
                {
                    "name": "token",
                    "description": "The access token",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the token is valid, false otherwise",
                "type": "Boolean"
            },
            "class": "accessToken",
            "module": "core-oauth"
        },
        {
            "file": "app\\server\\oauth\\accessToken.js",
            "line": 96,
            "description": "Default token Time To Live value (1 hour).",
            "itemtype": "property",
            "name": "ttl",
            "type": "Number",
            "default": "3600",
            "class": "accessToken",
            "module": "core-oauth"
        },
        {
            "file": "app\\server\\oauth\\client.js",
            "line": 20,
            "description": "Gets ClientModel instance.",
            "itemtype": "method",
            "name": "getClientModel",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The ClientModel instance",
                "type": "ClientModel"
            },
            "class": "client",
            "module": "core-oauth"
        },
        {
            "file": "app\\server\\oauth\\client.js",
            "line": 34,
            "description": "Gets clients id.",
            "itemtype": "method",
            "name": "getId",
            "static": 1,
            "params": [
                {
                    "name": "oAuthClient",
                    "description": "An OAuth client",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "The client's id",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The client id",
                "type": "String"
            },
            "class": "client",
            "module": "core-oauth"
        },
        {
            "file": "app\\server\\oauth\\client.js",
            "line": 47,
            "description": "Fetches client object by primary key.",
            "itemtype": "method",
            "name": "fetchById",
            "static": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The client id",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "with :\n - **Object** An error is something went wrong or null if everything is fine\n - **Object** The client object or null if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "client",
            "module": "core-oauth"
        },
        {
            "file": "app\\server\\oauth\\client.js",
            "line": 62,
            "description": "Verifies client's secret.",
            "itemtype": "method",
            "name": "checkSecret",
            "static": 1,
            "params": [
                {
                    "name": "oAuthClient",
                    "description": "An OAuth client",
                    "type": "Object",
                    "props": [
                        {
                            "name": "secret",
                            "description": "The client's secret",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "secret",
                    "description": "OAuth client's secret to verify",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "with :\n - **Error** An error is something went wrong or null if everything is fine\n - **Boolean** true if the client's secret is verified",
                    "type": "Function"
                }
            ],
            "class": "client",
            "module": "core-oauth"
        },
        {
            "file": "app\\server\\oauth\\client.js",
            "line": 78,
            "description": "Checks grant type permission for the client.\n\nFor now only client_credentials grant type is available.",
            "itemtype": "method",
            "name": "checkGrantType",
            "static": 1,
            "params": [
                {
                    "name": "client",
                    "description": "An OAuth client",
                    "type": "Object"
                },
                {
                    "name": "grantType",
                    "description": "The grant type asked by client",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the grant type is \"client_credentials\"\nfalse otherwise",
                "type": "Boolean"
            },
            "class": "client",
            "module": "core-oauth"
        },
        {
            "file": "app\\server\\oauth\\client.js",
            "line": 94,
            "description": "Gets the list of scopes granted for the client.",
            "itemtype": "method",
            "name": "checkScope",
            "static": 1,
            "params": [
                {
                    "name": "oAuthClient",
                    "description": "An OAuth client",
                    "type": "Object",
                    "props": [
                        {
                            "name": "scopes",
                            "description": "The client's scopes",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "scope The list of scopes sent by the OAuth client",
                "type": "Array"
            },
            "class": "client",
            "module": "core-oauth"
        },
        {
            "file": "app\\server\\plugin\\CorePlugin.js",
            "line": 27,
            "description": "Core plugin name.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "CorePlugin",
            "module": "core-plugin"
        },
        {
            "file": "app\\server\\plugin\\CorePlugin.js",
            "line": 35,
            "description": "Core plugin path.",
            "itemtype": "property",
            "name": "path",
            "type": "String",
            "final": 1,
            "class": "CorePlugin",
            "module": "core-plugin"
        },
        {
            "file": "app\\server\\plugin\\CorePlugin.js",
            "line": 44,
            "description": "Core plugin mount path.",
            "itemtype": "property",
            "name": "mountPath",
            "type": "String",
            "final": 1,
            "class": "CorePlugin",
            "module": "core-plugin"
        },
        {
            "file": "app\\server\\plugin\\CorePlugin.js",
            "line": 53,
            "description": "Core APIs.",
            "itemtype": "property",
            "name": "api",
            "type": "PluginApi",
            "final": 1,
            "class": "CorePlugin",
            "module": "core-plugin"
        },
        {
            "file": "app\\server\\plugin\\CorePlugin.js",
            "line": 62,
            "description": "Core public router.",
            "itemtype": "property",
            "name": "router",
            "type": "Router",
            "final": 1,
            "class": "CorePlugin",
            "module": "core-plugin"
        },
        {
            "file": "app\\server\\plugin\\CorePlugin.js",
            "line": 71,
            "description": "Core private router.",
            "itemtype": "property",
            "name": "router",
            "type": "Router",
            "final": 1,
            "class": "CorePlugin",
            "module": "core-plugin"
        },
        {
            "file": "app\\server\\plugin\\CorePlugin.js",
            "line": 80,
            "description": "Core web service router.",
            "itemtype": "property",
            "name": "router",
            "type": "Router",
            "final": 1,
            "class": "CorePlugin",
            "module": "core-plugin"
        },
        {
            "file": "app\\server\\plugin\\CorePluginApi.js",
            "line": 29,
            "description": "Gets the list of loaded openveo plugins.",
            "itemtype": "method",
            "name": "getPlugins",
            "return": {
                "description": "The list of loaded plugins",
                "type": "Array"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app\\server\\plugin\\CorePluginApi.js",
            "line": 39,
            "description": "Gets the current database instance.",
            "itemtype": "method",
            "name": "getDatabase",
            "return": {
                "description": "The application's database",
                "type": "Database"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app\\server\\plugin\\CorePluginApi.js",
            "line": 49,
            "description": "Gets the id of the super administrator.",
            "itemtype": "method",
            "name": "getSuperAdminId",
            "return": {
                "description": "The super administrator id",
                "type": "String"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app\\server\\plugin\\CorePluginApi.js",
            "line": 59,
            "description": "Gets the id of the anonymous user.",
            "itemtype": "method",
            "name": "getAnonymousUserId",
            "return": {
                "description": "The anonymous user id",
                "type": "String"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app\\server\\plugin\\CorePluginApi.js",
            "line": 69,
            "description": "Gets the list of entities defined by plugins.",
            "itemtype": "method",
            "name": "getEntities",
            "return": {
                "description": "The list of entities by entity name",
                "type": "Object"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app\\server\\plugin\\CorePluginApi.js",
            "line": 79,
            "description": "Gets the list of permissions defined by plugins.",
            "itemtype": "method",
            "name": "getPermissions",
            "return": {
                "description": "The list of permissions",
                "type": "Object"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app\\server\\plugin\\CorePluginApi.js",
            "line": 89,
            "description": "Gets the list of Web Service scopes defined by plugins.",
            "itemtype": "method",
            "name": "getWebServiceScopes",
            "return": {
                "description": "The list of Web Service scopes",
                "type": "Object"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app\\server\\plugin\\CorePluginApi.js",
            "line": 99,
            "description": "Gets information about the application server.",
            "itemtype": "method",
            "name": "getServerConfiguration",
            "return": {
                "description": "The server configuration",
                "type": "Object"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app\\server\\plugin\\CorePluginApi.js",
            "line": 113,
            "description": "Gets a dictionary of translations by its name and language.\n\nSearch is made on i18n directory and all plugin's i18n directories.\nIf the same dictionary name is found twice (same file name in different i18n directories),\ndictionaries are merged.",
            "example": [
                "\n    process.api.getCoreApi().getTranslations('login', 'fr-FR', function(error, translations) {\n      console.log(translations);\n    });",
                "\n    process.api.getCoreApi().getTranslations('back-office', 'en', function(error, translations) {\n      console.log(translations);\n    });"
            ],
            "itemtype": "method",
            "name": "getTranslations",
            "async": 1,
            "params": [
                {
                    "name": "dictionary",
                    "description": "The name of the dictionary, this is the name of the dictionary file without\nextension",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The language country code (e.g. en-US)",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done\n - **Error** An error if something went wrong\n - **Object** A JavaScript object containing all translations",
                    "type": "Function"
                }
            ],
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app\\server\\plugin\\CorePluginApi.js",
            "line": 219,
            "description": "Gets OpenVeo CDN url ending with a slash.",
            "itemtype": "method",
            "name": "getCdnUrl",
            "return": {
                "description": "The CDN url",
                "type": "String"
            },
            "class": "CorePluginApi",
            "module": "core-plugin"
        },
        {
            "file": "app\\server\\providers\\ClientProvider.js",
            "line": 25,
            "description": "Retrieves a client application by its id.",
            "itemtype": "method",
            "name": "getOne",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The client id",
                    "type": "String"
                },
                {
                    "name": "filter",
                    "description": "A MongoDB filter",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The entity",
                    "type": "Function"
                }
            ],
            "class": "ClientProvider",
            "module": "core-providers"
        },
        {
            "file": "app\\server\\providers\\ClientProvider.js",
            "line": 50,
            "description": "Creates clients indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "ClientProvider",
            "module": "core-providers"
        },
        {
            "file": "app\\server\\providers\\GroupProvider.js",
            "line": 25,
            "description": "Creates groups indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "GroupProvider",
            "module": "core-providers"
        },
        {
            "file": "app\\server\\providers\\RoleProvider.js",
            "line": 25,
            "description": "Gets roles by ids.",
            "itemtype": "method",
            "name": "getByIds",
            "async": 1,
            "params": [
                {
                    "name": "ids",
                    "description": "The list of role ids",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Array** The list of roles",
                    "type": "Function"
                }
            ],
            "class": "RoleProvider",
            "module": "core-providers"
        },
        {
            "file": "app\\server\\providers\\RoleProvider.js",
            "line": 48,
            "description": "Creates roles indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "RoleProvider",
            "module": "core-providers"
        },
        {
            "file": "app\\server\\providers\\TaxonomyProvider.js",
            "line": 25,
            "description": "Creates taxonomies indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "TaxonomyProvider",
            "module": "core-providers"
        },
        {
            "file": "app\\server\\providers\\TokenProvider.js",
            "line": 24,
            "description": "Removes all tokens associated to a client application.",
            "itemtype": "method",
            "name": "removeByClient",
            "async": 1,
            "params": [
                {
                    "name": "clientId",
                    "description": "The id of the client",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of deleted tokens",
                    "type": "Function"
                }
            ],
            "class": "TokenProvider",
            "module": "core-providers"
        },
        {
            "file": "app\\server\\providers\\TokenProvider.js",
            "line": 41,
            "description": "Gets a token by its value.",
            "itemtype": "method",
            "name": "getByValue",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "The token value",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The fetched token",
                    "type": "Function"
                }
            ],
            "class": "TokenProvider",
            "module": "core-providers"
        },
        {
            "file": "app\\server\\providers\\TokenProvider.js",
            "line": 64,
            "description": "Creates tokens indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "TokenProvider",
            "module": "core-providers"
        },
        {
            "file": "app\\server\\providers\\UserProvider.js",
            "line": 25,
            "description": "Gets a user by its credentials.",
            "itemtype": "method",
            "name": "getUserByCredentials",
            "async": 1,
            "params": [
                {
                    "name": "email",
                    "description": "The email of the user",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "The password of the user",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The user",
                    "type": "Function"
                }
            ],
            "class": "UserProvider",
            "module": "core-providers"
        },
        {
            "file": "app\\server\\providers\\UserProvider.js",
            "line": 50,
            "description": "Gets a user by its email.",
            "itemtype": "method",
            "name": "getUserByEmail",
            "async": 1,
            "params": [
                {
                    "name": "email",
                    "description": "The email of the user",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The user",
                    "type": "Function"
                }
            ],
            "class": "UserProvider",
            "module": "core-providers"
        },
        {
            "file": "app\\server\\providers\\UserProvider.js",
            "line": 73,
            "description": "Gets a user without its paswword.",
            "itemtype": "method",
            "name": "getOne",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The user id",
                    "type": "String"
                },
                {
                    "name": "filter",
                    "description": "A MongoDB filter",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The user",
                    "type": "Function"
                }
            ],
            "class": "UserProvider",
            "module": "core-providers"
        },
        {
            "file": "app\\server\\providers\\UserProvider.js",
            "line": 98,
            "description": "Creates users indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "UserProvider",
            "module": "core-providers"
        },
        {
            "file": "app\\server\\servers\\ApplicationServer.js",
            "line": 66,
            "description": "List of path holding template engine views.",
            "itemtype": "property",
            "name": "viewsFolders",
            "type": "Array",
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\ApplicationServer.js",
            "line": 74,
            "description": "Image styles for image processing.",
            "itemtype": "property",
            "name": "imagesStyle",
            "type": "Object",
            "final": 1,
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\ApplicationServer.js",
            "line": 83,
            "description": "Back end menu description object.",
            "itemtype": "property",
            "name": "menu",
            "type": "Array",
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\ApplicationServer.js",
            "line": 91,
            "description": "Migrations scripts to execute.",
            "itemtype": "property",
            "name": "migrations",
            "type": "Object",
            "final": 1,
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\ApplicationServer.js",
            "line": 100,
            "description": "Socket server.",
            "itemtype": "property",
            "name": "socketServer",
            "type": "SocketServer",
            "final": 1,
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\ApplicationServer.js",
            "line": 109,
            "description": "Database session storage.",
            "itemtype": "property",
            "name": "sessionStore",
            "type": "Object",
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\ApplicationServer.js",
            "line": 117,
            "description": "Express session middleware.",
            "itemtype": "property",
            "name": "sessionMiddleware",
            "type": "Object",
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\ApplicationServer.js",
            "line": 145,
            "description": "Prepares the express application.",
            "itemtype": "method",
            "name": "onDatabaseAvailable",
            "async": 1,
            "params": [
                {
                    "name": "db",
                    "description": "The application database",
                    "type": "Database"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done with:\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\ApplicationServer.js",
            "line": 185,
            "description": "Loads plugin.\n\nMounts plugin's assets directories, public router, private router, menu\nviews folders and permissions.",
            "itemtype": "method",
            "name": "onPluginLoaded",
            "async": 1,
            "params": [
                {
                    "name": "plugin",
                    "description": "The openveo plugin",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done with:\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\ApplicationServer.js",
            "line": 338,
            "description": "Finalizes the ApplicationServer initialization.\n\nMounts the assets directories of core and plugins, sets views\nfolders, sets permissions and set default route and error handling.\nDefault route must load the main view due to AngularJS single\napplication.",
            "itemtype": "method",
            "name": "async",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when its done with:\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\ApplicationServer.js",
            "line": 379,
            "description": "Starts the HTTP and socket servers.",
            "itemtype": "method",
            "name": "startServer",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "ApplicationServer",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\ExpressThumbnail.js",
            "line": 37,
            "description": "Sends image to client.",
            "params": [
                {
                    "name": "imagePath",
                    "description": "The absolute image path",
                    "type": "String"
                }
            ],
            "class": "Server",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\ExpressThumbnail.js",
            "line": 47,
            "description": "Send converted file from cache",
            "class": "Server",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\Server.js",
            "line": 20,
            "description": "Server configuration object.",
            "itemtype": "property",
            "name": "configuration",
            "type": "Object",
            "final": 1,
            "class": "Server",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\Server.js",
            "line": 29,
            "description": "Express application.",
            "itemtype": "property",
            "name": "httpServer",
            "type": "Application",
            "final": 1,
            "class": "Server",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\Server.js",
            "line": 45,
            "description": "Handles database available event.\n\nIt assures that the database is loaded and can be accessed.",
            "itemtype": "method",
            "name": "onDatabaseAvailable",
            "async": 1,
            "params": [
                {
                    "name": "db",
                    "description": "The application database",
                    "type": "Database"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done with:\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "Server",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\Server.js",
            "line": 60,
            "description": "Handles plugin loaded event.\n\nIt assures that the given plugin is fully loaded.",
            "example": [
                "\n    MyServer.prototype.onPluginLoaded(plugin){\n      console.log(plugin);\n    };"
            ],
            "itemtype": "method",
            "name": "onPluginLoaded",
            "async": 1,
            "params": [
                {
                    "name": "plugin",
                    "description": "The openveo plugin",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done with:\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "Server",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\Server.js",
            "line": 79,
            "description": "Handles plugins loaded event.\n\nIt assures that all plugins are fully loaded.",
            "itemtype": "method",
            "name": "async",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when its done with:\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "Server",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\Server.js",
            "line": 92,
            "description": "Starts the server.",
            "itemtype": "method",
            "name": "startServer",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "Server",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\WebServiceServer.js",
            "line": 36,
            "description": "migrations Script description object.",
            "itemtype": "property",
            "name": "migrations",
            "type": "Object",
            "final": 1,
            "class": "WebServiceServer",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\WebServiceServer.js",
            "line": 75,
            "description": "Loads plugin.",
            "itemtype": "method",
            "name": "onPluginLoaded",
            "async": 1,
            "params": [
                {
                    "name": "plugin",
                    "description": "The openveo plugin",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done with:\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "WebServiceServer",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\WebServiceServer.js",
            "line": 112,
            "description": "Sets errors routes.\n\nSets errors routes when all plugins are loaded to handle not found\nendpoints and errors.",
            "itemtype": "method",
            "name": "async",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when its done with:\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "WebServiceServer",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\servers\\WebServiceServer.js",
            "line": 132,
            "description": "Starts the HTTP server.",
            "itemtype": "method",
            "name": "startServer",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "WebServiceServer",
            "module": "core-servers"
        },
        {
            "file": "app\\server\\api.js",
            "line": 16,
            "description": "The list of loaded plugins.",
            "itemtype": "property",
            "name": "plugins",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "api",
            "module": "core"
        },
        {
            "file": "app\\server\\api.js",
            "line": 25,
            "description": "Gets a plugin by its name.",
            "itemtype": "method",
            "name": "getPlugin",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The plugin's name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The plugin",
                "type": "Plugin"
            },
            "class": "api",
            "module": "core"
        },
        {
            "file": "app\\server\\api.js",
            "line": 44,
            "description": "Gets the list of loaded plugins.",
            "itemtype": "method",
            "name": "getPlugins",
            "static": 1,
            "return": {
                "description": "The list of loaded plugins",
                "type": "Array"
            },
            "class": "api",
            "module": "core"
        },
        {
            "file": "app\\server\\api.js",
            "line": 55,
            "description": "Adds a plugin to the list of plugins.",
            "itemtype": "method",
            "name": "addPlugin",
            "params": [
                {
                    "name": "plugin",
                    "description": "The plugin to add",
                    "type": "Plugin"
                }
            ],
            "throws": {
                "description": "If plugin is not a valid plugin",
                "type": "TypeError"
            },
            "class": "api",
            "module": "core"
        },
        {
            "file": "app\\server\\api.js",
            "line": 72,
            "description": "Gets API of a plugin.",
            "itemtype": "method",
            "name": "getApi",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The plugin's name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The plugin's API",
                "type": "PluginApi"
            },
            "class": "api",
            "module": "core"
        },
        {
            "file": "app\\server\\api.js",
            "line": 85,
            "description": "Gets core plugin's API.",
            "itemtype": "method",
            "name": "getCoreApi",
            "static": 1,
            "return": {
                "description": "The core plugin's API",
                "type": "PluginApi"
            },
            "class": "api",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 23,
            "description": "A server error occurring when no error were specified.",
            "itemtype": "property",
            "name": "UNKNOWN_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 35,
            "description": "A server error occurring when getting a dictionary of translations.",
            "itemtype": "property",
            "name": "I18N_DICTIONARY_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 47,
            "description": "A server error occurring when getting the list of taxonomies.",
            "itemtype": "property",
            "name": "GET_TAXONOMIES_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 59,
            "description": "A server error occurring when getting the list of groups.",
            "itemtype": "property",
            "name": "GET_GROUPS_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 71,
            "description": "A server error occurring when authenticating the user to the back end.",
            "itemtype": "property",
            "name": "BACK_END_AUTHENTICATION_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 83,
            "description": "A server error occurring when getting the list of applications.",
            "itemtype": "property",
            "name": "GET_APPLICATIONS_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 95,
            "description": "A server error occurring when getting the list of roles.",
            "itemtype": "property",
            "name": "GET_ROLES_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 107,
            "description": "A server error occurring when getting the list of users.",
            "itemtype": "property",
            "name": "GET_USERS_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 119,
            "description": "A server error occurring when updating information about a user.",
            "itemtype": "property",
            "name": "UPDATE_USER_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 131,
            "description": "A server error occurring when getting the list of terms of a taxonomy.",
            "itemtype": "property",
            "name": "GET_TAXONOMY_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 145,
            "description": "A server error occurring when requested path does not exist.",
            "itemtype": "property",
            "name": "PATH_NOT_FOUND",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 157,
            "description": "A server error occurring when requested dictionary does not exist.",
            "itemtype": "property",
            "name": "I18N_DICTIONARY_NOT_FOUND",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 169,
            "description": "A server error occurring when requested taxonomy does not exist.",
            "itemtype": "property",
            "name": "GET_TAXONOMY_NOT_FOUND",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 183,
            "description": "A server error occurring when user authentication to the back end failed.",
            "itemtype": "property",
            "name": "BACK_END_AUTHENTICATION_FAILED",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 195,
            "description": "A server error occurring when a back end authentication is needed to perform the action.",
            "itemtype": "property",
            "name": "BACK_END_UNAUTHORIZED",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 207,
            "description": "A server error occurring when user connected to the back end is not authorized to perform an action.",
            "itemtype": "property",
            "name": "BACK_END_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 219,
            "description": "A server error occurring when user connected to the Web Service is not authorized to perform an action.",
            "itemtype": "property",
            "name": "WS_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 231,
            "description": "A server error occurring when a Web Service authentication is needed to perform an action.",
            "itemtype": "property",
            "name": "WS_UNAUTHORIZED",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 243,
            "description": "A server error occurring when connected user is not authorized to update a user.",
            "itemtype": "property",
            "name": "UPDATE_USER_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 255,
            "description": "A server error occurring when connected user is not authorized to update a taxonomy.",
            "itemtype": "property",
            "name": "GET_TAXONOMY_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 269,
            "description": "A server error occurring when getting users with wrong parameters.",
            "itemtype": "property",
            "name": "GET_USERS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 281,
            "description": "A server error occurring when updating a user with missing parameters.",
            "itemtype": "property",
            "name": "UPDATE_USER_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 293,
            "description": "A server error occurring when updating a user with wrong parameters.",
            "itemtype": "property",
            "name": "UPDATE_USER_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 305,
            "description": "A server error occurring when getting taxonomies with wrong parameters.",
            "itemtype": "property",
            "name": "GET_TAXONOMIES_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 317,
            "description": "A server error occurring when getting applications with wrong parameters.",
            "itemtype": "property",
            "name": "GET_APPLICATIONS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 329,
            "description": "A server error occurring when getting groups with wrong parameters.",
            "itemtype": "property",
            "name": "GET_GROUPS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 341,
            "description": "A server error occurring when getting roles with wrong parameters.",
            "itemtype": "property",
            "name": "GET_ROLES_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\httpErrors.js",
            "line": 353,
            "description": "A server error occurring when getting taxonomy terms with missing parameters.",
            "itemtype": "property",
            "name": "GET_TAXONOMY_TERMS_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "core"
        },
        {
            "file": "app\\server\\passport.js",
            "line": 12,
            "description": "Gets user roles details.",
            "async": 1,
            "itemtype": "method",
            "name": "getUserRoles",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "user",
                    "description": "The user",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done\n - *Error* An error if something went wrong, null otherwise\n - *Object* The upgraded user with roles details",
                    "type": "Function"
                }
            ],
            "class": "path",
            "module": "core"
        },
        {
            "file": "app\\server\\path.js",
            "line": 14,
            "description": "Validates a path regarding a rule.",
            "example": [
                "\n    var path = process.require(\"app/server/path.js\");\n    path.validate(\"get /test\", \"get /test\"); // true\n    path.validate(\"get /test\", \"/test\"); // true\n    path.validate(\"get /test\", \"/*\"); // true\n    path.validate(\"get /test\", \"*\"); // true\n    path.validate(\"post /test\", \"post /test\"); // true\n    path.validate(\"put /test\", \"put /test\"); // true\n    path.validate(\"delete /test\", \"delete /test\"); // true\n    path.validate(\"/test\", \"/test\"); // true\n    path.validate(\"get /test\", \"\"); // false\n    path.validate(\"get /test\", \"/\"); // false\n    path.validate(\"get /test\", \"/other\"); // false\n    path.validate(\"get /test\", \"post /test\"); // false\n    path.validate(\"get /test\", \"post\"); // false\n    path.validate(\"get /test\", \"get\"); // false\n    path.validate(\"get /test\", \"unknwon /test\"); // false"
            ],
            "itemtype": "method",
            "name": "validate",
            "static": 1,
            "params": [
                {
                    "name": "path",
                    "description": "The path to validate",
                    "type": "String"
                },
                {
                    "name": "String",
                    "description": "rule The rule to validate path"
                }
            ],
            "return": {
                "description": "true if the rule validates the path, false\notherwise",
                "type": "Boolean"
            },
            "class": "path",
            "module": "core"
        },
        {
            "file": "app\\server\\storage.js",
            "line": 23,
            "description": "Gets the computed back end menu with all links.",
            "itemtype": "method",
            "name": "getMenu",
            "static": 1,
            "return": {
                "description": "The list of back end links",
                "type": "Array"
            },
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app\\server\\storage.js",
            "line": 34,
            "description": "Sets the back end menu list of links.",
            "itemtype": "method",
            "name": "setMenu",
            "static": 1,
            "params": [
                {
                    "name": "newMenu",
                    "description": "The list of back end menu links",
                    "type": "Array"
                }
            ],
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app\\server\\storage.js",
            "line": 45,
            "description": "Gets the current database instance.",
            "itemtype": "method",
            "name": "getDatabase",
            "static": 1,
            "return": {
                "description": "A Database object",
                "type": "Database"
            },
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app\\server\\storage.js",
            "line": 56,
            "description": "Sets a new database instance as the current database.",
            "itemtype": "method",
            "name": "setDatabase",
            "static": 1,
            "params": [
                {
                    "name": "newDatabase",
                    "description": "The new database of the application",
                    "type": "Database"
                }
            ],
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app\\server\\storage.js",
            "line": 67,
            "description": "Sets the web service list of scopes.",
            "itemtype": "method",
            "name": "setWebServiceScopes",
            "static": 1,
            "params": [
                {
                    "name": "newScopes",
                    "description": "The new list of scopes for the web service",
                    "type": "Object"
                }
            ],
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app\\server\\storage.js",
            "line": 78,
            "description": "Gets the list of web service scopes defined by plugins.",
            "itemtype": "method",
            "name": "getWebServiceScopes",
            "static": 1,
            "return": {
                "description": "scopes",
                "type": "Object"
            },
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app\\server\\storage.js",
            "line": 89,
            "description": "Sets the list of permissions.",
            "itemtype": "method",
            "name": "setPermissions",
            "static": 1,
            "params": [
                {
                    "name": "permissions",
                    "description": "The new list of permissions",
                    "type": "Object"
                }
            ],
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app\\server\\storage.js",
            "line": 100,
            "description": "Gets the list of permissions defined by plugins.",
            "itemtype": "method",
            "name": "getPermissions",
            "static": 1,
            "return": {
                "description": "permissions",
                "type": "Object"
            },
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app\\server\\storage.js",
            "line": 111,
            "description": "Sets the list of entities.",
            "itemtype": "method",
            "name": "setEntities",
            "static": 1,
            "params": [
                {
                    "name": "newEntities",
                    "description": "The list of entities",
                    "type": "Object"
                }
            ],
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app\\server\\storage.js",
            "line": 122,
            "description": "Gets the list of entities defined by plugins.",
            "itemtype": "method",
            "name": "getEntities",
            "static": 1,
            "return": {
                "description": "entities",
                "type": "Object"
            },
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app\\server\\storage.js",
            "line": 133,
            "description": "Sets the application server configuration.",
            "itemtype": "method",
            "name": "setServerConfiguration",
            "static": 1,
            "params": [
                {
                    "name": "configuration",
                    "description": "The server configuration",
                    "type": "Object"
                }
            ],
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app\\server\\storage.js",
            "line": 144,
            "description": "Gets the application server configuration.",
            "itemtype": "method",
            "name": "getServerConfiguration",
            "static": 1,
            "return": {
                "description": "The server configuration",
                "type": "Object"
            },
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app\\server\\storage.js",
            "line": 155,
            "description": "Gets OpenVeo configuration.",
            "itemtype": "method",
            "name": "getConfiguration",
            "static": 1,
            "return": {
                "description": "The OpenVeo configuration",
                "type": "Object"
            },
            "class": "storage",
            "module": "core"
        },
        {
            "file": "app\\server\\storage.js",
            "line": 166,
            "description": "Sets the OpenVeo configuration.",
            "itemtype": "method",
            "name": "setConfiguration",
            "static": 1,
            "params": [
                {
                    "name": "conf",
                    "description": "The OpenVeo configuration",
                    "type": "Object"
                }
            ],
            "class": "storage",
            "module": "core"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nCreates a TaxonomyModel.",
            "line": " app\\server\\models\\TaxonomyModel.js:17"
        },
        {
            "message": "Missing item type\nSends image to client.",
            "line": " app\\server\\servers\\ExpressThumbnail.js:37"
        },
        {
            "message": "Missing item type\nSend converted file from cache",
            "line": " app\\server\\servers\\ExpressThumbnail.js:47"
        }
    ]
}