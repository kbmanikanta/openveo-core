{
    "project": {
        "name": "OpenVeo AngularJS back end",
        "description": "AngularJS OpenVeo back end documentation",
        "version": "4.0.0"
    },
    "files": {
        "app\\client\\admin\\js\\alert\\AlertApp.js": {
            "name": "app\\client\\admin\\js\\alert\\AlertApp.js",
            "modules": {
                "ov.alert": 1
            },
            "classes": {
                "alertService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\authentication\\AuthenticationApp.js": {
            "name": "app\\client\\admin\\js\\authentication\\AuthenticationApp.js",
            "modules": {
                "ov.authentication": 1
            },
            "classes": {
                "authenticationService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\entity\\EntityApp.js": {
            "name": "app\\client\\admin\\js\\entity\\EntityApp.js",
            "modules": {
                "ov.entity": 1
            },
            "classes": {
                "entityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\i18n\\I18nApp.js": {
            "name": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "modules": {
                "ov.i18n": 1
            },
            "classes": {
                "i18nService": 1,
                "translateFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\ov\\ApplicationController.js": {
            "name": "app\\client\\admin\\js\\ov\\ApplicationController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\ov\\ApplicationService.js": {
            "name": "app\\client\\admin\\js\\ov\\ApplicationService.js",
            "modules": {},
            "classes": {
                "applicationService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\ov\\ErrorInterceptor.js": {
            "name": "app\\client\\admin\\js\\ov\\ErrorInterceptor.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\ov\\GroupController.js": {
            "name": "app\\client\\admin\\js\\ov\\GroupController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\ov\\HomeController.js": {
            "name": "app\\client\\admin\\js\\ov\\HomeController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\ov\\LoginController.js": {
            "name": "app\\client\\admin\\js\\ov\\LoginController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\ov\\MainController.js": {
            "name": "app\\client\\admin\\js\\ov\\MainController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\ov\\MenuService.js": {
            "name": "app\\client\\admin\\js\\ov\\MenuService.js",
            "modules": {},
            "classes": {
                "menuService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\ov\\MultiCheckBoxDirective.js": {
            "name": "app\\client\\admin\\js\\ov\\MultiCheckBoxDirective.js",
            "modules": {},
            "classes": {
                "ovMultiCheckBox": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\ov\\OvApp.js": {
            "name": "app\\client\\admin\\js\\ov\\OvApp.js",
            "modules": {
                "ov": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\ov\\ProfileController.js": {
            "name": "app\\client\\admin\\js\\ov\\ProfileController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\ov\\RoleController.js": {
            "name": "app\\client\\admin\\js\\ov\\RoleController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\ov\\TagsDirective.js": {
            "name": "app\\client\\admin\\js\\ov\\TagsDirective.js",
            "modules": {},
            "classes": {
                "ovTags": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\ov\\TruncateFilter.js": {
            "name": "app\\client\\admin\\js\\ov\\TruncateFilter.js",
            "modules": {},
            "classes": {
                "truncateFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\ov\\UserController.js": {
            "name": "app\\client\\admin\\js\\ov\\UserController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\ov\\UserService.js": {
            "name": "app\\client\\admin\\js\\ov\\UserService.js",
            "modules": {},
            "classes": {
                "userService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\socket\\SocketApp.js": {
            "name": "app\\client\\admin\\js\\socket\\SocketApp.js",
            "modules": {
                "ov.socket": 1
            },
            "classes": {
                "SocketFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\storage\\StorageApp.js": {
            "name": "app\\client\\admin\\js\\storage\\StorageApp.js",
            "modules": {
                "ov.storage": 1
            },
            "classes": {
                "storageProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\tableForm\\tableForm.js": {
            "name": "app\\client\\admin\\js\\tableForm\\tableForm.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app\\client\\admin\\js\\util\\utilService.js": {
            "name": "app\\client\\admin\\js\\util\\utilService.js",
            "modules": {
                "ov.util": 1
            },
            "classes": {
                "utilService": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "ov.alert": {
            "name": "ov.alert",
            "submodules": {},
            "elements": {},
            "classes": {
                "alertService": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app\\client\\admin\\js\\alert\\AlertApp.js",
            "line": 13,
            "description": "Controls alerts for the whole application.",
            "itemtype": "main"
        },
        "ov.authentication": {
            "name": "ov.authentication",
            "submodules": {},
            "elements": {},
            "classes": {
                "authenticationService": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app\\client\\admin\\js\\authentication\\AuthenticationApp.js",
            "line": 13,
            "description": "Service to authenticate / logout or manipulate authenticated user informations.",
            "itemtype": "main"
        },
        "ov.entity": {
            "name": "ov.entity",
            "submodules": {},
            "elements": {},
            "classes": {
                "entityService": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app\\client\\admin\\js\\entity\\EntityApp.js",
            "line": 13,
            "description": "Manage OpenVeo entities described in conf.js.",
            "itemtype": "main"
        },
        "ov.i18n": {
            "name": "ov.i18n",
            "submodules": {},
            "elements": {},
            "classes": {
                "i18nService": 1,
                "translateFilter": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "line": 288,
            "description": "Control back end internationalization.",
            "itemtype": "main"
        },
        "ov": {
            "name": "ov",
            "submodules": {},
            "elements": {},
            "classes": {
                "applicationService": 1,
                "menuService": 1,
                "ovMultiCheckBox": 1,
                "ovTags": 1,
                "truncateFilter": 1,
                "userService": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app\\client\\admin\\js\\ov\\UserService.js",
            "line": 5,
            "description": "Main OpenVeo module.\n\nLoads all AngularJS dependencies and plugins modules. It also initializes formly and define routes exposed\nby OpenVeo core.",
            "example": [
                "\n\n    // The checkboxes to select (the model)\n    $scope.listOfValues = ['value1'];\n\n    // The list of checkboxes with a name and a value for each checkbox\n    $scope.listOfOptions = [{\n      name: 'name1'\n      id: 'value1'\n    },\n    {\n      name: 'name2'\n      id: 'value2'\n    }];\n\n    // The property to use as a label in listOfOptions object (\"name\" by default)\n    $scope.labelProperty = 'name';\n\n    // The property to use as a value in listOfOptions object (\"value\" by default)\n    $scope.valueProperty = 'id';\n\n    // A boolean to activate / deactivate the group of checkboxes\n    $scope.disabled = false;\n\n    <ov-multi-check-box\n      ng-model=\"listOfValues\"\n      options=\"listOfOptions\"\n      label-property=\"labelProperty\"\n      value-property=\"valueProperty\"\n      disabled=\"disabled\"\n      ng-model-options=\"{ allowInvalid: true }\">\n    </ov-multi-check-box>"
            ],
            "itemtype": "main"
        },
        "ov.socket": {
            "name": "ov.socket",
            "submodules": {},
            "elements": {},
            "classes": {
                "SocketFactory": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app\\client\\admin\\js\\socket\\SocketApp.js",
            "line": 13,
            "description": "Defines the ov.socket module to build a socket.io client.",
            "itemtype": "main"
        },
        "ov.storage": {
            "name": "ov.storage",
            "submodules": {},
            "elements": {},
            "classes": {
                "storageProvider": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app\\client\\admin\\js\\storage\\StorageApp.js",
            "line": 13,
            "description": "Helper module to manipulate local storage.",
            "itemtype": "main"
        },
        "ov.util": {
            "name": "ov.util",
            "submodules": {},
            "elements": {},
            "classes": {
                "utilService": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app\\client\\admin\\js\\util\\utilService.js",
            "line": 13,
            "description": "OpenVeo helper.",
            "itemtype": "main"
        }
    },
    "classes": {
        "alertService": {
            "name": "alertService",
            "shortname": "alertService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ov.alert",
            "namespace": "",
            "file": "app\\client\\admin\\js\\alert\\AlertApp.js",
            "line": 13,
            "description": "Defines a generic alert management system to display one or several messages."
        },
        "authenticationService": {
            "name": "authenticationService",
            "shortname": "authenticationService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ov.authentication",
            "namespace": "",
            "file": "app\\client\\admin\\js\\authentication\\AuthenticationApp.js",
            "line": 13,
            "description": "Defines an authentication service to deal with user authentication.\nExposes methods to deal with user information and to sign in or logout."
        },
        "entityService": {
            "name": "entityService",
            "shortname": "entityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ov.entity",
            "namespace": "",
            "file": "app\\client\\admin\\js\\entity\\EntityApp.js",
            "line": 13,
            "description": "Defines an entity service to create / update or remove an entity."
        },
        "i18nService": {
            "name": "i18nService",
            "shortname": "i18nService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ov.i18n",
            "namespace": "",
            "file": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "line": 13,
            "description": "Defines an internationalization service to manage string translations."
        },
        "translateFilter": {
            "name": "translateFilter",
            "shortname": "translateFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ov.i18n",
            "namespace": "",
            "file": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "line": 288,
            "description": "Defines a filter to translate an id, contained inside a dictionary,\ninto the appropriated text."
        },
        "applicationService": {
            "name": "applicationService",
            "shortname": "applicationService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ov",
            "namespace": "",
            "file": "app\\client\\admin\\js\\ov\\ApplicationService.js",
            "line": 5,
            "description": "Defines service to manage the web service applications."
        },
        "menuService": {
            "name": "menuService",
            "shortname": "menuService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ov",
            "namespace": "",
            "file": "app\\client\\admin\\js\\ov\\MenuService.js",
            "line": 5,
            "description": "Defines a menu service to manage the menu of the application."
        },
        "ovMultiCheckBox": {
            "name": "ovMultiCheckBox",
            "shortname": "ovMultiCheckBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ov",
            "namespace": "",
            "file": "app\\client\\admin\\js\\ov\\MultiCheckBoxDirective.js",
            "line": 5,
            "description": "Creates a new Angular directive as an HTML element ov-multi-check-box to be able to create a list of checkboxes\nwith a single model.",
            "example": [
                "\n\n    // The checkboxes to select (the model)\n    $scope.listOfValues = ['value1'];\n\n    // The list of checkboxes with a name and a value for each checkbox\n    $scope.listOfOptions = [{\n      name: 'name1'\n      id: 'value1'\n    },\n    {\n      name: 'name2'\n      id: 'value2'\n    }];\n\n    // The property to use as a label in listOfOptions object (\"name\" by default)\n    $scope.labelProperty = 'name';\n\n    // The property to use as a value in listOfOptions object (\"value\" by default)\n    $scope.valueProperty = 'id';\n\n    // A boolean to activate / deactivate the group of checkboxes\n    $scope.disabled = false;\n\n    <ov-multi-check-box\n      ng-model=\"listOfValues\"\n      options=\"listOfOptions\"\n      label-property=\"labelProperty\"\n      value-property=\"valueProperty\"\n      disabled=\"disabled\"\n      ng-model-options=\"{ allowInvalid: true }\">\n    </ov-multi-check-box>"
            ]
        },
        "ovTags": {
            "name": "ovTags",
            "shortname": "ovTags",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ov",
            "namespace": "",
            "file": "app\\client\\admin\\js\\ov\\TagsDirective.js",
            "line": 5,
            "description": "Creates a new Angular directive as an HTML element ov-tags to be able to create a tags form element.\n\nTags form element is composed of an input element to add tags followed by the list of added tags.",
            "example": [
                "\n    var listOfTags = ['tag1', 'tag2'];\n    <ov-tags ng-model=\"listOfTags\" ng-model-options=\"{ allowInvalid: true }\"></ov-tags>"
            ]
        },
        "truncateFilter": {
            "name": "truncateFilter",
            "shortname": "truncateFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ov",
            "namespace": "",
            "file": "app\\client\\admin\\js\\ov\\TruncateFilter.js",
            "line": 5,
            "description": "Truncates a text to 35 characters and add '...' at the end of the truncated string."
        },
        "userService": {
            "name": "userService",
            "shortname": "userService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ov",
            "namespace": "",
            "file": "app\\client\\admin\\js\\ov\\UserService.js",
            "line": 5,
            "description": "Defines service to manage roles and permissions."
        },
        "SocketFactory": {
            "name": "SocketFactory",
            "shortname": "SocketFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ov.socket",
            "namespace": "",
            "file": "app\\client\\admin\\js\\socket\\SocketApp.js",
            "line": 13,
            "description": "Defines a SocketFactory holding a socket.io client singleton."
        },
        "storageProvider": {
            "name": "storageProvider",
            "shortname": "storageProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ov.storage",
            "namespace": "",
            "file": "app\\client\\admin\\js\\storage\\StorageApp.js",
            "line": 13,
            "description": "Defines a storage provider to help store information.\nFor now sessionStorage and localStorage are supported."
        },
        "utilService": {
            "name": "utilService",
            "shortname": "utilService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ov.util",
            "namespace": "",
            "file": "app\\client\\admin\\js\\util\\utilService.js",
            "line": 13,
            "description": "Defines an Util service to expose helper function."
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "app\\client\\admin\\js\\alert\\AlertApp.js",
            "line": 21,
            "description": "Closes an alert by its position in alerts array.",
            "params": [
                {
                    "name": "index",
                    "description": "Position in array",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The list of remaining alerts",
                "type": "Array"
            },
            "class": "alertService",
            "module": "ov.alert"
        },
        {
            "file": "app\\client\\admin\\js\\alert\\AlertApp.js",
            "line": 31,
            "description": "Closes an alert.",
            "params": [
                {
                    "name": "alert",
                    "description": "Alert to close",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The list of remaining alerts",
                "type": "Array"
            },
            "class": "alertService",
            "module": "ov.alert"
        },
        {
            "file": "app\\client\\admin\\js\\alert\\AlertApp.js",
            "line": 43,
            "description": "Displays an alert.",
            "example": [
                "\n    // Info alert displayed for 4 seconds\n    AlertService.add('info', 'Message of the alert', 4000);\n\n    // Error alert displayed permanently\n    AlertService.add('danger', 'Message of the alert');"
            ],
            "params": [
                {
                    "name": "type",
                    "description": "The alert type (success, danger, warning or info)",
                    "type": "String"
                },
                {
                    "name": "msg",
                    "description": "The alert message",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "The timeout (in ms) before closing the alert, if not specified the alert\nwill be permanent",
                    "type": "Number",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "add",
            "class": "alertService",
            "module": "ov.alert"
        },
        {
            "file": "app\\client\\admin\\js\\alert\\AlertApp.js",
            "line": 77,
            "description": "Closes all opened alerts.",
            "example": [
                "\n    // Close all alerts\n    AlertService.closeAll();"
            ],
            "itemtype": "method",
            "name": "closeAll",
            "class": "alertService",
            "module": "ov.alert"
        },
        {
            "file": "app\\client\\admin\\js\\authentication\\AuthenticationApp.js",
            "line": 23,
            "description": "Initializes user information from local storage.",
            "class": "authenticationService",
            "module": "ov.authentication"
        },
        {
            "file": "app\\client\\admin\\js\\authentication\\AuthenticationApp.js",
            "line": 32,
            "description": "Signs in using the given credentials.",
            "params": [
                {
                    "name": "email",
                    "description": "The email",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "The password",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The authentication promise",
                "type": "Promise"
            },
            "itemtype": "method",
            "name": "login",
            "class": "authenticationService",
            "module": "ov.authentication"
        },
        {
            "file": "app\\client\\admin\\js\\authentication\\AuthenticationApp.js",
            "line": 47,
            "description": "Logs out user.",
            "return": {
                "description": "The logout promise",
                "type": "Promise"
            },
            "itemtype": "method",
            "name": "logout",
            "class": "authenticationService",
            "module": "ov.authentication"
        },
        {
            "file": "app\\client\\admin\\js\\authentication\\AuthenticationApp.js",
            "line": 57,
            "description": "Gets user information.",
            "return": {
                "description": "The user description object",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getUserInfo",
            "class": "authenticationService",
            "module": "ov.authentication"
        },
        {
            "file": "app\\client\\admin\\js\\authentication\\AuthenticationApp.js",
            "line": 67,
            "description": "Sets user information.",
            "params": [
                {
                    "name": "info",
                    "description": "The user description object or null to remove all user information\nuser information",
                    "type": "Object",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "setUserInfo",
            "class": "authenticationService",
            "module": "ov.authentication"
        },
        {
            "file": "app\\client\\admin\\js\\entity\\EntityApp.js",
            "line": 22,
            "description": "Deletes cache of the given entity type.",
            "params": [
                {
                    "name": "entityType",
                    "description": "The entity type or null to remove all cache",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "pluginName",
                    "description": "Plugin name the entity belongs to, null for core",
                    "type": "String",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "deleteCache",
            "class": "entityService",
            "module": "ov.entity"
        },
        {
            "file": "app\\client\\admin\\js\\entity\\EntityApp.js",
            "line": 44,
            "description": "Adds a new Entity.",
            "params": [
                {
                    "name": "entityType",
                    "description": "Type of entity",
                    "type": "String"
                },
                {
                    "name": "pluginName",
                    "description": "Plugin name the entity belongs to, null for core",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "Data description object of the entity",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The HTTP promise",
                "type": "Promise"
            },
            "itemtype": "method",
            "name": "addEntity",
            "class": "entityService",
            "module": "ov.entity"
        },
        {
            "file": "app\\client\\admin\\js\\entity\\EntityApp.js",
            "line": 59,
            "description": "Updates an entity.",
            "params": [
                {
                    "name": "entityType",
                    "description": "Type of entity",
                    "type": "String"
                },
                {
                    "name": "pluginName",
                    "description": "Plugin name the entity belongs to, null for core",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "id",
                    "description": "The id of the entity to update",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data description object of the entity",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The HTTP promise",
                "type": "Promise"
            },
            "itemtype": "method",
            "name": "updateEntity",
            "class": "entityService",
            "module": "ov.entity"
        },
        {
            "file": "app\\client\\admin\\js\\entity\\EntityApp.js",
            "line": 75,
            "description": "Removes an entity.",
            "params": [
                {
                    "name": "entityType",
                    "description": "Type of entity",
                    "type": "String"
                },
                {
                    "name": "pluginName",
                    "description": "Plugin name the entity belongs to, null for core",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "id",
                    "description": "The id of the entity to remove",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The HTTP promise",
                "type": "Promise"
            },
            "itemtype": "method",
            "name": "removeEntity",
            "class": "entityService",
            "module": "ov.entity"
        },
        {
            "file": "app\\client\\admin\\js\\entity\\EntityApp.js",
            "line": 90,
            "description": "Fetch an entity by Id.",
            "params": [
                {
                    "name": "entityType",
                    "description": "Type of entity",
                    "type": "String"
                },
                {
                    "name": "pluginName",
                    "description": "Plugin name the entity belongs to, null for core",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "id",
                    "description": "The Id of the entity to fetch",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The HTTP promise",
                "type": "Promise"
            },
            "itemtype": "method",
            "name": "getEntity",
            "class": "entityService",
            "module": "ov.entity"
        },
        {
            "file": "app\\client\\admin\\js\\entity\\EntityApp.js",
            "line": 104,
            "description": "Get all entities filtered by param.",
            "example": [
                "\n\n    // Get the first page of Web Service applications sorted by name with 10 applications per page\n    var params = {\n      count: 10,\n      page: 1,\n      sort: {\n        name: 1\n      }\n    };\n    getEntities('applications', params);"
            ],
            "params": [
                {
                    "name": "entityType",
                    "description": "Type of entity",
                    "type": "String"
                },
                {
                    "name": "pluginName",
                    "description": "Plugin name the entity belongs to, null for core",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "param",
                    "description": "Request parameters with a property \"filter\" with a MongoDB criteria as value, a\nproperty \"count\" with a MongoDB count as value, a property \"page\" with the expected page as value and a\nproperty \"sort\" with a MongoDB sort object as value",
                    "type": "Object"
                },
                {
                    "name": "canceller",
                    "description": "The HTTP promise to cancel request if needed, reject the promise to cancel the\nrequest",
                    "type": "Promise",
                    "optional": true
                }
            ],
            "return": {
                "description": "The HTTP promise",
                "type": "Promise"
            },
            "itemtype": "method",
            "name": "getEntities",
            "class": "entityService",
            "module": "ov.entity"
        },
        {
            "file": "app\\client\\admin\\js\\entity\\EntityApp.js",
            "line": 162,
            "description": "Gets all entities of a specific type.",
            "params": [
                {
                    "name": "entityType",
                    "description": "Type of entity",
                    "type": "String"
                },
                {
                    "name": "pluginName",
                    "description": "Plugin name the entity belongs to, null for core",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The HTTP promise",
                "type": "Promise"
            },
            "itemtype": "method",
            "name": "getAllEntities",
            "class": "entityService",
            "module": "ov.entity"
        },
        {
            "file": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "line": 23,
            "description": "Adds a new dictionary, to the translation table, for the current\nlanguage.\nA dictionary is referenced by its name and contains a JSON\nrepresentation of all its translations.\nIf dictionary does not exist yet, get it from the server.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the dictionary to retrieve from\nserver",
                    "type": "String"
                },
                {
                    "name": "admin",
                    "description": "true to retrieve a dictionary for the back\noffice part (which requires authentication), false to get a\ndictionary without access restriction",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The promise to retrieve the dictionary",
                "type": "Promise"
            },
            "itemtype": "method",
            "name": "addDictionary",
            "class": "i18nService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "line": 58,
            "description": "Removes a dictionary from cache.",
            "params": [
                {
                    "name": "name",
                    "description": "The dictionary name",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "removeDictionary",
            "class": "i18nService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "line": 68,
            "description": "Gets a dictionary with all its languages or just for the specific language.",
            "params": [
                {
                    "name": "name",
                    "description": "The dictionary name",
                    "type": "String"
                },
                {
                    "name": "language",
                    "description": "An optional language to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The translations contained in the dictionary",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getDictionary",
            "class": "i18nService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "line": 83,
            "description": "Gets current language.",
            "return": {
                "description": "The current language country code (e.g en-US)",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getLanguage",
            "class": "i18nService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "line": 93,
            "description": "Gets supported languages.",
            "return": {
                "description": "The list of supported languages",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getLanguages",
            "class": "i18nService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "line": 103,
            "description": "Tests if a language is supported.",
            "params": [
                {
                    "name": "language",
                    "description": "The language code to test",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if supported, false otherwise",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "isLanguageSupported",
            "class": "i18nService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "line": 119,
            "description": "Sets current language to active and the other one to inactive.",
            "class": "i18nService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "line": 127,
            "description": "Sets current language.",
            "params": [
                {
                    "name": "language",
                    "description": "The current language country code (e.g en-CA)",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "setLanguage",
            "class": "i18nService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "line": 141,
            "description": "Gets full name of a language by its code.",
            "params": [
                {
                    "name": "language",
                    "description": "The language code",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The language full name",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getLanguageName",
            "class": "i18nService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "line": 157,
            "description": "Looks for a translation inside a translations object.",
            "example": [
                "\n    getTranslationFromDictionary('CORE.HOME.LOGIN', {\n       'CORE': {\n         'HOME': {\n            'LOGIN': 'The translation to look for'\n          }\n        }\n    });"
            ],
            "params": [
                {
                    "name": "id",
                    "description": "The id to retrieve (e.g. CORE.HOME.LOGIN)",
                    "type": "String"
                },
                {
                    "name": "dictionary",
                    "description": "Translations where to look for",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The translated text corresponding to the given id\nin the translations or the unchanged id if no translation found",
                "type": "String"
            },
            "class": "i18nService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "line": 189,
            "description": "Translates the given id using current language.",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the translation",
                    "type": "String"
                },
                {
                    "name": "dictionary",
                    "description": "The name of a particular dictionary if several dictionaries are loaded",
                    "type": "String",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "translate",
            "class": "i18nService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "line": 236,
            "description": "Destroys I18nService cached data.",
            "itemtype": "method",
            "name": "destroy",
            "class": "i18nService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "line": 245,
            "description": "Initializes supported languages.",
            "class": "i18nService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\i18n\\I18nApp.js",
            "line": 296,
            "description": "Translates an id, contained inside a dictionary, into the appropriated text.\n\n**translate** filter helps translate a dictionary id.\n\nIf id is not found in the specified dictionary for the actual language, it will search in the english version\nof the dictionary.<br/>\nIf id is not found in the dictionary, the id is not translated and will be printed as is.<br/>\n\nIf the dictionary is not specified, it will look for the id in all loaded dictionaries.<br/>\nFor each dictionary analyzed, if the id does not exist in the actual language it will try in the english\nversion of the dictionary.<br/>\nAfter all, if id is not found in any versions of the list of dictionaries, the id is not translated and will\nbe printed as is.",
            "example": [
                "\n    // Let's pretend that with have a dictionary named \"login\" with the following structure :\n    // {\n    //   \"LOGIN\" : {\n    //     \"PAGE_TITLE\" : \"Openveo - Sign In\",\n    //     \"DESCRIPTION\" : \"Login page description for {{name}}\",\n    //     \"LOGIN\" : \"User\",\n    //   }\n    // }\n\n    // Search for id LOGIN.DESCRIPTION in dictionary \"login\" : \"Login page description\"\n\n    // In HTML\n    // <label ng-bind=\"'LOGIN.DESCRIPTION' | translate:login:{Object}\"></label>\n\n    // In JavaScript\n    $filter('translate')('LOGIN.DESCRIPTION', 'login', {name: \"John\"});"
            ],
            "params": [
                {
                    "name": "id",
                    "description": "The id of the translation",
                    "type": "String"
                },
                {
                    "name": "dictionaryName",
                    "description": "An optional dictionary to prevent looking in all dictionaries",
                    "type": "String"
                },
                {
                    "name": "interpolateParams",
                    "description": "Translation parameters",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "translate",
            "class": "translateFilter",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\ApplicationController.js",
            "line": 5,
            "description": "Defines the user controller for the user page.",
            "class": "applicationService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\ApplicationController.js",
            "line": 11,
            "description": "Translates name and description of each scope.",
            "class": "applicationService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\ApplicationController.js",
            "line": 21,
            "description": "Removes a list of applications.",
            "params": [
                {
                    "name": "selected",
                    "description": "The list of application ids to remove",
                    "type": "Array"
                },
                {
                    "name": "reload",
                    "description": "The reload Function to force reloading the table",
                    "type": "Function"
                }
            ],
            "class": "applicationService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\ApplicationController.js",
            "line": 35,
            "description": "Saves application.",
            "params": [
                {
                    "name": "application",
                    "description": "The application to save",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise resolving when application has been saved",
                "type": "Promise"
            },
            "class": "applicationService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\ApplicationController.js",
            "line": 48,
            "description": "Adds an application.",
            "params": [
                {
                    "name": "application",
                    "description": "The application to add",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise resolving when application has been added",
                "type": "Promise"
            },
            "class": "applicationService",
            "module": "ov.i18n"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\ApplicationService.js",
            "line": 15,
            "description": "Loads the list of scopes available for client applications.",
            "return": {
                "description": "The Http promise",
                "type": "Promise"
            },
            "itemtype": "method",
            "name": "loadScopes",
            "class": "applicationService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\ApplicationService.js",
            "line": 36,
            "description": "Gets the available list of scopes for client applications.",
            "params": [
                {
                    "name": "The",
                    "description": "scopes",
                    "type": "Array"
                }
            ],
            "itemtype": "method",
            "name": "getScopes",
            "class": "applicationService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\ApplicationService.js",
            "line": 46,
            "description": "Destroys applicationService cached datas.",
            "itemtype": "method",
            "name": "destroy",
            "class": "applicationService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\ErrorInterceptor.js",
            "line": 5,
            "description": "Builds the error message for the given error.",
            "params": [
                {
                    "name": "error",
                    "description": "The promise error as returned by the interceptor",
                    "type": "Object"
                },
                {
                    "name": "$filter",
                    "description": "Angular filter",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The translated error message",
                "type": "String"
            },
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\ErrorInterceptor.js",
            "line": 38,
            "description": "Defines an HTTP interceptor to handle all application errors.\n\nNot authorized errors (401) logs out the user while the other HTTP errors set an error message\nusing an alert.",
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\GroupController.js",
            "line": 5,
            "description": "Defines the group controller for the group page.",
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\GroupController.js",
            "line": 11,
            "description": "Adds a group.",
            "params": [
                {
                    "name": "group",
                    "description": "Group description object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise resolving when the group has been added",
                "type": "Promise"
            },
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\GroupController.js",
            "line": 23,
            "description": "Saves a group.",
            "params": [
                {
                    "name": "group",
                    "description": "Group description obect",
                    "type": "Object"
                },
                {
                    "name": "A",
                    "description": "promise resolving when the group has been saved",
                    "type": "Promise"
                }
            ],
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\GroupController.js",
            "line": 35,
            "description": "Removes a group.",
            "params": [
                {
                    "name": "groups",
                    "description": "The list of group ids to remove",
                    "type": "Array"
                },
                {
                    "name": "reload",
                    "description": "The reload Function to force reloading the table",
                    "type": "Function"
                }
            ],
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\HomeController.js",
            "line": 5,
            "description": "Defines the back office controller for the home page.",
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\HomeController.js",
            "line": 27,
            "description": "Defines a controller for modal instance.",
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\LoginController.js",
            "line": 5,
            "description": "Defines the login controller for the login page.",
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\LoginController.js",
            "line": 14,
            "description": "Sets language.",
            "params": [
                {
                    "name": "language",
                    "description": "The language code (e.g fr_FR)",
                    "type": "String"
                }
            ],
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\LoginController.js",
            "line": 24,
            "description": "Signs in using the login form information (userEmail and password).\nIf user successfully signed in, redirect to the back office\nhome page. Otherwise, set the form as on error.",
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MainController.js",
            "line": 5,
            "description": "Defines the main controller parent of all controllers in the\napplication. All actions not handled in partials are handled\nby the main controller.",
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MainController.js",
            "line": 32,
            "description": "Logs out the user.\nRemove user information, remove all admin informations\nand broadcast a loggedOut event to children controllers.",
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MainController.js",
            "line": 51,
            "description": "Replaces placeholders by corresponding values in the given string.\nFunction copied from AngularJS ngRoute.",
            "params": [
                {
                    "name": "string",
                    "description": "A string containing placeholders",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "An array of parameters",
                    "type": "String"
                }
            ],
            "return": {
                "description": "interpolation of the redirect path with the parameters",
                "type": "String"
            },
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MainController.js",
            "line": 75,
            "description": "Replaces placeholders by corresponding values in the given string.",
            "params": [
                {
                    "name": "string",
                    "description": "A string containing placeholders",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "An array of parameters",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The compiled string",
                "type": "String"
            },
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MainController.js",
            "line": 91,
            "description": "Gets permissions from groups for the given operation.",
            "params": [
                {
                    "name": "groupIds",
                    "description": "A list of group ids",
                    "type": "Array"
                },
                {
                    "name": "operation",
                    "description": "\"get\", \"update\" or \"delete\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The list of permissions",
                "type": "Array"
            },
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MainController.js",
            "line": 131,
            "description": "Changes the language to the given one.\n\nThis will reload the page due to the main menu which can't be\nreloaded.",
            "params": [
                {
                    "name": "language",
                    "description": "The new language code (e.g. fr_FR)",
                    "type": "String"
                }
            ],
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MainController.js",
            "line": 153,
            "description": "Logs out the actual user.\nThis will remove user information and redirect to the login\npage.",
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MainController.js",
            "line": 297,
            "description": "Checks that authenticated user has a permission.",
            "params": [
                {
                    "name": "permissions",
                    "description": "One or several permissions",
                    "type": "Array|String"
                }
            ],
            "return": {
                "description": "true if user has one of the permissions, false otherwise",
                "type": "Boolean"
            },
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MainController.js",
            "line": 325,
            "description": "Checks that user has permission to access a content.",
            "params": [
                {
                    "name": "content",
                    "description": "The content entity to try to access",
                    "type": "Object"
                },
                {
                    "name": "operation",
                    "description": "The operation that will be performed on the content",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if user has sufficient permission to perform the operation on the content",
                "type": "Boolean"
            },
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MenuService.js",
            "line": 15,
            "description": "Sets menu items corresponding to the actual path to active and the other menu items to inactive.",
            "itemtype": "method",
            "name": "setActiveMenuItem",
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MenuService.js",
            "line": 43,
            "description": "Loads the menu from server.",
            "return": {
                "description": "The Http promise",
                "type": "Promise"
            },
            "itemtype": "method",
            "name": "loadMenu",
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MenuService.js",
            "line": 63,
            "description": "Gets the menu.",
            "return": {
                "description": "The menu",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getMenu",
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MenuService.js",
            "line": 73,
            "description": "Destroys MenuService cached data.",
            "itemtype": "method",
            "name": "destroyMenu",
            "class": "menuService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MultiCheckBoxDirective.js",
            "line": 63,
            "description": "Finds the index of the given value in the list of checkboxes.",
            "params": [
                {
                    "name": "value",
                    "description": "The value of the checkbox",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The index of the checkbox in the list of checkboxes (-1 if not found)",
                "type": "Number"
            },
            "class": "ovMultiCheckBox",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MultiCheckBoxDirective.js",
            "line": 77,
            "description": "Renders the list of checkboxes using the model.\n\nIt overrides AngularJS $render.",
            "class": "ovMultiCheckBox",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MultiCheckBoxDirective.js",
            "line": 95,
            "description": "Updates model when a checkbox is modified.",
            "class": "ovMultiCheckBox",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MultiCheckBoxDirective.js",
            "line": 110,
            "description": "Listens to model modifications coming from outside the directive.\n\nIf model is modified from outside the directive, the view needs to be updated.",
            "class": "ovMultiCheckBox",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\MultiCheckBoxDirective.js",
            "line": 123,
            "description": "Tests if the model is empty.\n\nIt overrides AngularJS $isEmpty.",
            "params": [
                {
                    "name": "values",
                    "description": "The list of checkboxes",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "true if there is no checked checkboxes, false otherwise",
                "type": "Boolean"
            },
            "class": "ovMultiCheckBox",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\OvApp.js",
            "line": 244,
            "description": "Configures application main routes and set location mode to HTML5.",
            "class": "ovTags",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\ProfileController.js",
            "line": 5,
            "description": "Defines the profile controller for the profile page.",
            "class": "ovTags",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\ProfileController.js",
            "line": 14,
            "description": "Gets the list of role's names.",
            "return": {
                "description": "A comma separated role names",
                "type": "String"
            },
            "class": "ovTags",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\ProfileController.js",
            "line": 29,
            "description": "Updates user password.",
            "params": [
                {
                    "name": "userInfo",
                    "description": "User data information",
                    "type": "Object"
                }
            ],
            "class": "ovTags",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\ProfileController.js",
            "line": 52,
            "description": "Saves user information.",
            "params": [
                {
                    "name": "userInfo",
                    "description": "The user information",
                    "type": "Object"
                }
            ],
            "class": "ovTags",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\RoleController.js",
            "line": 5,
            "description": "Defines the role controller for the role page.",
            "class": "ovTags",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\RoleController.js",
            "line": 11,
            "description": "Translates label, name and description keys of each permission.",
            "class": "ovTags",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\RoleController.js",
            "line": 24,
            "description": "Gets the list of permissions inside a group.",
            "params": [
                {
                    "name": "model",
                    "description": "Roles model",
                    "type": "Object"
                }
            ],
            "class": "ovTags",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\RoleController.js",
            "line": 43,
            "description": "Saves a role.",
            "params": [
                {
                    "name": "role",
                    "description": "Role data",
                    "type": "Object"
                },
                {
                    "name": "successCb",
                    "description": "Function to call in case of success",
                    "type": "Function"
                }
            ],
            "class": "ovTags",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\RoleController.js",
            "line": 57,
            "description": "Adds a role.",
            "params": [
                {
                    "name": "role",
                    "description": "Role information",
                    "type": "Object"
                },
                {
                    "name": "successCb",
                    "description": "Function to call in case of success",
                    "type": "Function"
                }
            ],
            "class": "ovTags",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\RoleController.js",
            "line": 71,
            "description": "Prepares permissions for HTMLCheckboxElement(s).",
            "params": [
                {
                    "name": "perms",
                    "description": "The list of permission groups",
                    "type": "Array"
                },
                {
                    "name": "rolePermissions",
                    "description": "The list of permission ids",
                    "type": "Array"
                }
            ],
            "class": "ovTags",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\RoleController.js",
            "line": 91,
            "description": "Removes a list of roles.",
            "params": [
                {
                    "name": "selected",
                    "description": "The list of role ids to remove",
                    "type": "Array"
                },
                {
                    "name": "reload",
                    "description": "The reload Function to force reloading the table",
                    "type": "Function"
                }
            ],
            "class": "ovTags",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\TagsDirective.js",
            "line": 28,
            "description": "Renders the list of tags using the model.\n\nIt overrides AngularJS $render.",
            "class": "ovTags",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\TagsDirective.js",
            "line": 37,
            "description": "Adds a new tag when user press \"enter\".",
            "params": [
                {
                    "name": "event",
                    "description": "The keyboard event",
                    "type": "Event"
                }
            ],
            "class": "ovTags",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\TagsDirective.js",
            "line": 65,
            "description": "Removes a tag when user click on the delete icon.",
            "params": [
                {
                    "name": "event",
                    "description": "The click event",
                    "type": "Event"
                },
                {
                    "name": "index",
                    "description": "The index of the tag to remove in the list of tags",
                    "type": "Number"
                }
            ],
            "class": "ovTags",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\TagsDirective.js",
            "line": 87,
            "description": "Tests if the model is empty.\n\nIt overrides AngularJS $isEmpty.",
            "params": [
                {
                    "name": "values",
                    "description": "The list of tags",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "true if there is no tags, false otherwise",
                "type": "Boolean"
            },
            "class": "ovTags",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\UserController.js",
            "line": 5,
            "description": "Defines the user controller for the user page.",
            "class": "userService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\UserController.js",
            "line": 12,
            "description": "Adds a user.",
            "params": [
                {
                    "name": "user",
                    "description": "The user data",
                    "type": "Object"
                }
            ],
            "class": "userService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\UserController.js",
            "line": 28,
            "description": "Removes a list of users.",
            "params": [
                {
                    "name": "selected",
                    "description": "The list of user ids to remove",
                    "type": "Array"
                },
                {
                    "name": "reload",
                    "description": "The reload Function to force reloading the table",
                    "type": "Function"
                }
            ],
            "class": "userService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\UserController.js",
            "line": 42,
            "description": "Saves user.",
            "params": [
                {
                    "name": "user",
                    "description": "The user data",
                    "type": "Object"
                }
            ],
            "class": "userService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\UserService.js",
            "line": 15,
            "description": "Loads the list of roles from server.",
            "return": {
                "description": "The Http promise",
                "type": "Promise"
            },
            "itemtype": "method",
            "name": "loadRoles",
            "class": "userService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\UserService.js",
            "line": 38,
            "description": "Loads the list of permissions from server.",
            "return": {
                "description": "The Http promise",
                "type": "Promise"
            },
            "itemtype": "method",
            "name": "loadPermissions",
            "class": "userService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\UserService.js",
            "line": 59,
            "description": "Gets roles.",
            "return": {
                "description": "The roles",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getRoles",
            "class": "userService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\UserService.js",
            "line": 69,
            "description": "Gets permissions.",
            "return": {
                "description": "The permissions",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getRoles",
            "class": "userService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\UserService.js",
            "line": 79,
            "description": "Destroys UserService cached data.",
            "itemtype": "method",
            "name": "destroy",
            "class": "userService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\ov\\UserService.js",
            "line": 88,
            "description": "Clears a user service cache.",
            "params": [
                {
                    "name": "type",
                    "description": "The cache element to clear or null to remove all caches",
                    "type": "String",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "cacheClear",
            "class": "userService",
            "module": "ov"
        },
        {
            "file": "app\\client\\admin\\js\\socket\\SocketApp.js",
            "line": 22,
            "description": "Initializes a socket.io connection with the server if not already initialized.",
            "itemtype": "method",
            "name": "initSocket",
            "params": [
                {
                    "name": "namespace",
                    "description": "socket.io namespace name to connect to",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The socket.io client",
                "type": "Client"
            },
            "class": "SocketFactory",
            "module": "ov.socket"
        },
        {
            "file": "app\\client\\admin\\js\\storage\\StorageApp.js",
            "line": 32,
            "description": "Gets information from storage using the given key.",
            "params": [
                {
                    "name": "key",
                    "description": "The key of the element to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The stored value for the given key",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getFromStorage",
            "class": "storageProvider",
            "module": "ov.storage"
        },
        {
            "file": "app\\client\\admin\\js\\storage\\StorageApp.js",
            "line": 43,
            "description": "Adds information to the storage.",
            "params": [
                {
                    "name": "key",
                    "description": "The key of the element to add",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of the element to add",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "addToStorage",
            "class": "storageProvider",
            "module": "ov.storage"
        },
        {
            "file": "app\\client\\admin\\js\\storage\\StorageApp.js",
            "line": 54,
            "description": "Removes a key from the storage.",
            "params": [
                {
                    "name": "key",
                    "description": "The key of the element to remove",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "removeFromStorage",
            "class": "storageProvider",
            "module": "ov.storage"
        },
        {
            "file": "app\\client\\admin\\js\\tableForm\\tableForm.js",
            "line": 7,
            "description": "Defines a service reload Table.",
            "class": "utilService",
            "module": "ov.storage"
        },
        {
            "file": "app\\client\\admin\\js\\tableForm\\tableForm.js",
            "line": 20,
            "description": "Defines a DatePicker controller.",
            "class": "utilService",
            "module": "ov.storage"
        },
        {
            "file": "app\\client\\admin\\js\\tableForm\\tableForm.js",
            "line": 52,
            "description": "Defines a FormEditController.",
            "class": "utilService",
            "module": "ov.storage"
        },
        {
            "file": "app\\client\\admin\\js\\tableForm\\tableForm.js",
            "line": 181,
            "description": "Defines a FormAddController.",
            "class": "utilService",
            "module": "ov.storage"
        },
        {
            "file": "app\\client\\admin\\js\\tableForm\\tableForm.js",
            "line": 212,
            "description": "Defines a DataTableController.",
            "class": "utilService",
            "module": "ov.storage"
        },
        {
            "file": "app\\client\\admin\\js\\tableForm\\tableForm.js",
            "line": 388,
            "description": "Checks / unchecks a table row.",
            "itemtype": "method",
            "name": "check",
            "class": "utilService",
            "module": "ov.storage"
        },
        {
            "file": "app\\client\\admin\\js\\tableForm\\tableForm.js",
            "line": 467,
            "description": "Defines a modal instance for all modals related to the table form.",
            "class": "utilService",
            "module": "ov.storage"
        },
        {
            "file": "app\\client\\admin\\js\\util\\utilService.js",
            "line": 20,
            "description": "Builds groups select options.",
            "return": {
                "description": "The list of options",
                "type": "Array"
            },
            "class": "utilService",
            "module": "ov.util"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nCloses an alert by its position in alerts array.",
            "line": " app\\client\\admin\\js\\alert\\AlertApp.js:21"
        },
        {
            "message": "Missing item type\nCloses an alert.",
            "line": " app\\client\\admin\\js\\alert\\AlertApp.js:31"
        },
        {
            "message": "Missing item type\nInitializes user information from local storage.",
            "line": " app\\client\\admin\\js\\authentication\\AuthenticationApp.js:23"
        },
        {
            "message": "Missing item type\nSets current language to active and the other one to inactive.",
            "line": " app\\client\\admin\\js\\i18n\\I18nApp.js:119"
        },
        {
            "message": "Missing item type\nLooks for a translation inside a translations object.",
            "line": " app\\client\\admin\\js\\i18n\\I18nApp.js:157"
        },
        {
            "message": "Missing item type\nInitializes supported languages.",
            "line": " app\\client\\admin\\js\\i18n\\I18nApp.js:245"
        },
        {
            "message": "Missing item type\nDefines the user controller for the user page.",
            "line": " app\\client\\admin\\js\\ov\\ApplicationController.js:5"
        },
        {
            "message": "Missing item type\nTranslates name and description of each scope.",
            "line": " app\\client\\admin\\js\\ov\\ApplicationController.js:11"
        },
        {
            "message": "Missing item type\nRemoves a list of applications.",
            "line": " app\\client\\admin\\js\\ov\\ApplicationController.js:21"
        },
        {
            "message": "Missing item type\nSaves application.",
            "line": " app\\client\\admin\\js\\ov\\ApplicationController.js:35"
        },
        {
            "message": "Missing item type\nAdds an application.",
            "line": " app\\client\\admin\\js\\ov\\ApplicationController.js:48"
        },
        {
            "message": "Missing item type\nBuilds the error message for the given error.",
            "line": " app\\client\\admin\\js\\ov\\ErrorInterceptor.js:5"
        },
        {
            "message": "Missing item type\nDefines an HTTP interceptor to handle all application errors.\n\nNot authorized errors (401) logs out the user while the other HTTP errors set an error message\nusing an alert.",
            "line": " app\\client\\admin\\js\\ov\\ErrorInterceptor.js:38"
        },
        {
            "message": "Missing item type\nDefines the group controller for the group page.",
            "line": " app\\client\\admin\\js\\ov\\GroupController.js:5"
        },
        {
            "message": "Missing item type\nAdds a group.",
            "line": " app\\client\\admin\\js\\ov\\GroupController.js:11"
        },
        {
            "message": "Missing item type\nSaves a group.",
            "line": " app\\client\\admin\\js\\ov\\GroupController.js:23"
        },
        {
            "message": "Missing item type\nRemoves a group.",
            "line": " app\\client\\admin\\js\\ov\\GroupController.js:35"
        },
        {
            "message": "Missing item type\nDefines the back office controller for the home page.",
            "line": " app\\client\\admin\\js\\ov\\HomeController.js:5"
        },
        {
            "message": "Missing item type\nDefines a controller for modal instance.",
            "line": " app\\client\\admin\\js\\ov\\HomeController.js:27"
        },
        {
            "message": "Missing item type\nDefines the login controller for the login page.",
            "line": " app\\client\\admin\\js\\ov\\LoginController.js:5"
        },
        {
            "message": "Missing item type\nSets language.",
            "line": " app\\client\\admin\\js\\ov\\LoginController.js:14"
        },
        {
            "message": "Missing item type\nSigns in using the login form information (userEmail and password).\nIf user successfully signed in, redirect to the back office\nhome page. Otherwise, set the form as on error.",
            "line": " app\\client\\admin\\js\\ov\\LoginController.js:24"
        },
        {
            "message": "Missing item type\nDefines the main controller parent of all controllers in the\napplication. All actions not handled in partials are handled\nby the main controller.",
            "line": " app\\client\\admin\\js\\ov\\MainController.js:5"
        },
        {
            "message": "Missing item type\nLogs out the user.\nRemove user information, remove all admin informations\nand broadcast a loggedOut event to children controllers.",
            "line": " app\\client\\admin\\js\\ov\\MainController.js:32"
        },
        {
            "message": "Missing item type\nReplaces placeholders by corresponding values in the given string.\nFunction copied from AngularJS ngRoute.",
            "line": " app\\client\\admin\\js\\ov\\MainController.js:51"
        },
        {
            "message": "Missing item type\nReplaces placeholders by corresponding values in the given string.",
            "line": " app\\client\\admin\\js\\ov\\MainController.js:75"
        },
        {
            "message": "Missing item type\nGets permissions from groups for the given operation.",
            "line": " app\\client\\admin\\js\\ov\\MainController.js:91"
        },
        {
            "message": "Missing item type\nChanges the language to the given one.\n\nThis will reload the page due to the main menu which can't be\nreloaded.",
            "line": " app\\client\\admin\\js\\ov\\MainController.js:131"
        },
        {
            "message": "Missing item type\nLogs out the actual user.\nThis will remove user information and redirect to the login\npage.",
            "line": " app\\client\\admin\\js\\ov\\MainController.js:153"
        },
        {
            "message": "Missing item type\nChecks that authenticated user has a permission.",
            "line": " app\\client\\admin\\js\\ov\\MainController.js:297"
        },
        {
            "message": "Missing item type\nChecks that user has permission to access a content.",
            "line": " app\\client\\admin\\js\\ov\\MainController.js:325"
        },
        {
            "message": "Missing item type\nFinds the index of the given value in the list of checkboxes.",
            "line": " app\\client\\admin\\js\\ov\\MultiCheckBoxDirective.js:63"
        },
        {
            "message": "Missing item type\nRenders the list of checkboxes using the model.\n\nIt overrides AngularJS $render.",
            "line": " app\\client\\admin\\js\\ov\\MultiCheckBoxDirective.js:77"
        },
        {
            "message": "Missing item type\nUpdates model when a checkbox is modified.",
            "line": " app\\client\\admin\\js\\ov\\MultiCheckBoxDirective.js:95"
        },
        {
            "message": "Missing item type\nListens to model modifications coming from outside the directive.\n\nIf model is modified from outside the directive, the view needs to be updated.",
            "line": " app\\client\\admin\\js\\ov\\MultiCheckBoxDirective.js:110"
        },
        {
            "message": "Missing item type\nTests if the model is empty.\n\nIt overrides AngularJS $isEmpty.",
            "line": " app\\client\\admin\\js\\ov\\MultiCheckBoxDirective.js:123"
        },
        {
            "message": "Missing item type\nConfigures application main routes and set location mode to HTML5.",
            "line": " app\\client\\admin\\js\\ov\\OvApp.js:244"
        },
        {
            "message": "Missing item type\nDefines the profile controller for the profile page.",
            "line": " app\\client\\admin\\js\\ov\\ProfileController.js:5"
        },
        {
            "message": "Missing item type\nGets the list of role's names.",
            "line": " app\\client\\admin\\js\\ov\\ProfileController.js:14"
        },
        {
            "message": "Missing item type\nUpdates user password.",
            "line": " app\\client\\admin\\js\\ov\\ProfileController.js:29"
        },
        {
            "message": "Missing item type\nSaves user information.",
            "line": " app\\client\\admin\\js\\ov\\ProfileController.js:52"
        },
        {
            "message": "Missing item type\nDefines the role controller for the role page.",
            "line": " app\\client\\admin\\js\\ov\\RoleController.js:5"
        },
        {
            "message": "Missing item type\nTranslates label, name and description keys of each permission.",
            "line": " app\\client\\admin\\js\\ov\\RoleController.js:11"
        },
        {
            "message": "Missing item type\nGets the list of permissions inside a group.",
            "line": " app\\client\\admin\\js\\ov\\RoleController.js:24"
        },
        {
            "message": "Missing item type\nSaves a role.",
            "line": " app\\client\\admin\\js\\ov\\RoleController.js:43"
        },
        {
            "message": "Missing item type\nAdds a role.",
            "line": " app\\client\\admin\\js\\ov\\RoleController.js:57"
        },
        {
            "message": "Missing item type\nPrepares permissions for HTMLCheckboxElement(s).",
            "line": " app\\client\\admin\\js\\ov\\RoleController.js:71"
        },
        {
            "message": "Missing item type\nRemoves a list of roles.",
            "line": " app\\client\\admin\\js\\ov\\RoleController.js:91"
        },
        {
            "message": "Missing item type\nRenders the list of tags using the model.\n\nIt overrides AngularJS $render.",
            "line": " app\\client\\admin\\js\\ov\\TagsDirective.js:28"
        },
        {
            "message": "Missing item type\nAdds a new tag when user press \"enter\".",
            "line": " app\\client\\admin\\js\\ov\\TagsDirective.js:37"
        },
        {
            "message": "Missing item type\nRemoves a tag when user click on the delete icon.",
            "line": " app\\client\\admin\\js\\ov\\TagsDirective.js:65"
        },
        {
            "message": "Missing item type\nTests if the model is empty.\n\nIt overrides AngularJS $isEmpty.",
            "line": " app\\client\\admin\\js\\ov\\TagsDirective.js:87"
        },
        {
            "message": "Missing item type\nDefines the user controller for the user page.",
            "line": " app\\client\\admin\\js\\ov\\UserController.js:5"
        },
        {
            "message": "Missing item type\nAdds a user.",
            "line": " app\\client\\admin\\js\\ov\\UserController.js:12"
        },
        {
            "message": "Missing item type\nRemoves a list of users.",
            "line": " app\\client\\admin\\js\\ov\\UserController.js:28"
        },
        {
            "message": "Missing item type\nSaves user.",
            "line": " app\\client\\admin\\js\\ov\\UserController.js:42"
        },
        {
            "message": "Missing item type\nDefines a service reload Table.",
            "line": " app\\client\\admin\\js\\tableForm\\tableForm.js:7"
        },
        {
            "message": "Missing item type\nDefines a DatePicker controller.",
            "line": " app\\client\\admin\\js\\tableForm\\tableForm.js:20"
        },
        {
            "message": "Missing item type\nDefines a FormEditController.",
            "line": " app\\client\\admin\\js\\tableForm\\tableForm.js:52"
        },
        {
            "message": "Missing item type\nDefines a FormAddController.",
            "line": " app\\client\\admin\\js\\tableForm\\tableForm.js:181"
        },
        {
            "message": "Missing item type\nDefines a DataTableController.",
            "line": " app\\client\\admin\\js\\tableForm\\tableForm.js:212"
        },
        {
            "message": "Missing item type\nDefines a modal instance for all modals related to the table form.",
            "line": " app\\client\\admin\\js\\tableForm\\tableForm.js:467"
        },
        {
            "message": "Missing item type\nBuilds groups select options.",
            "line": " app\\client\\admin\\js\\util\\utilService.js:20"
        }
    ]
}